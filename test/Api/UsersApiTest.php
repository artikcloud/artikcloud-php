<?php
/**
 * UsersApiTest
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace ArtikCloud;

use \ArtikCloud\Configuration;
use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\ObjectSerializer;
use \ArtikCloudTests\ArtikTestCase;

// Models
use ArtikCloud\Model\AppProperties;

/**
 * UsersApiTest Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersApiTest extends ArtikTestCase
{

    public static $api_client;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        self::$api_client = new ApiClient();
        self::$api_client->getConfig()->setAccessToken(static::$artikParams['user1']['token']);
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for GetUserDeviceTypes
     *
     * Create User Application Properties.
     *
     */
    public function testGetUserDeviceTypes()
    {

        $users_api = new Api\UsersApi(self::$api_client);

        $response = $users_api->GetUserDeviceTypes(static::$artikParams['user1']['id']);
        $this->assertInstanceOf('ArtikCloud\Model\DeviceTypesEnvelope', $response);
        $this->assertNotNull($response, 'Call to GetUserDeviceTypes returned null');
        $this->assertNotNull($response->getData()->getDeviceTypes(), 'Call to GetUserDeviceTypes returned an empty device list');
    }

    /**
     * Test case for createUserProperties
     *
     * Create User Application Properties.
     *
     */
    public function testCreateUserProperties()
    {

    }

    /**
     * Test case for deleteUserProperties
     *
     * Delete User Application Properties.
     *
     */
    public function testDeleteUserProperties()
    {

    }

    /**
     * Test case for getSelf
     *
     * Get Current User Profile
     *
     */
    public function test_getSelf() {

        $users_api = new Api\UsersApi(self::$api_client);

        $response = $users_api->getSelf();
        $this->assertInstanceOf('ArtikCloud\Model\UserEnvelope', $response);
        $this->assertSame($response->getData()->getName(), static::$artikParams['user1']['name']);
        $this->assertSame($response->getData()->getFullName(), static::$artikParams['user1']['fullname']);
    }

    /**
     * Test case for getUserDevices
     *
     * Get User Devices
     *
     */
    public function testGetUserDevices() {

        $users_api = new Api\UsersApi(self::$api_client);

        $response = $users_api->getUserDevices(static::$artikParams['user1']['id']);
        $this->assertInstanceOf('ArtikCloud\Model\DevicesEnvelope', $response);
    }

    /**
     * Test case for getUserProperties
     *
     * Get User application properties.
     *
     */
    public function testGetUserProperties()
    {

        $users_api = new Api\UsersApi(self::$api_client);

        // Load parameters to be used during test
        $userId = static::$artikParams['user1']['id'];
        $aid = static::$artikParams['user1']['aid'];

        try {
            // Read
            $userProperties = $users_api->GetUserProperties($userId, $aid);

        } catch (ApiException $e) {

            // If not found
            if ($e->getCode() === 404) {

                // Create
                $appProperties = new AppProperties();
                $appProperties->setProperties('abc=def');

                $userProperties = $users_api->CreateUserProperties($userId, $appProperties, $aid);
            } else {

                $this->fail('Non-404 Error returned by API');
            }
        }

        $this->assertNotNull($userProperties);

        // Update
        $appProperties2 = new AppProperties();
        $appProperties2->setProperties('mno=pqr');
        $userProperties2 = $users_api->UpdateUserProperties($userId, $appProperties2, $aid);
        $this->assertNotNull($userProperties2);
        $this->assertEquals('mno=pqr', $appProperties2->getProperties(), 'Properties must be the same');

        // Delete
        $userProperties3 = $users_api->DeleteUserProperties($userId, $aid);
        $this->assertNotNull($userProperties3);
        $this->assertEquals($userProperties2, $userProperties3);

    }

    /**
     * Test case for getUserRules
     *
     * Get User Rules.
     *
     */
    public function testGetUserRules()
    {

        $users_api = new Api\UsersApi(self::$api_client);

        // Load parameters to be used during test
        $userId = static::$artikParams['user1']['id'];

        // Read
        $rulesEnvelope = $users_api->GetUserRules($userId, false, null, null);
        $this->assertNotNull($rulesEnvelope);
        $this->assertNotNull($rulesEnvelope->getData());
        
    }

    /**
     * Test case for updateUserProperties
     *
     * Update User Application Properties.
     *
     */
    public function testUpdateUserProperties()
    {

    }

}
