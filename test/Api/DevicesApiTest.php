<?php
/**
 * DevicesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace ArtikCloud;

use \ArtikCloud\Configuration;
use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\ObjectSerializer;
use \ArtikCloudTests\ArtikTestCase;

/**
 * DevicesApiTest Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DevicesApiTest extends ArtikTestCase
{

    public static $api_client;
    public static $devices_api;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        $accessToken = static::$artikParams['user1']['token'];

        self::$api_client = new ApiClient();
        self::$api_client->getConfig()->setAccessToken($accessToken);
        self::$devices_api = new Api\DevicesApi(self::$api_client);
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
        self::$api_client = null;
        self::$devices_api = null;
    }

    /**
     * Test case for addDevice
     *
     * Add Device.
     *
     */
    public function testAddDevice()
    {

        // TODO: uncomment below to test the method and replace null with proper value
        // $device = null;
        // $deviceEnvelope = static::$devices_api->AddDevice($device);
        // $this->assertInstanceOf('ArtikCloud\Model\DeviceEnvelope', $deviceEnvelope, 'Response must be an instance of ArtikCloud\Model\DeviceEnvelope');

    }

    /**
     * Test case for deleteDevice
     *
     * Delete Device.
     *
     */
    public function testDeleteDevice()
    {

        // TODO: uncomment below to test the method and replace null with proper value
        // $deviceId = null;
        // $deviceEnvelope = static::$devices_api->DeleteDevice($deviceId);
        // $this->assertInstanceOf('ArtikCloud\Model\DeviceEnvelope', $deviceEnvelope, 'Response must be an instance of ArtikCloud\Model\DeviceEnvelope');

    }

    /**
     * Test case for deleteDeviceToken
     *
     * Delete Device Token.
     *
     */
    public function testDeleteDeviceToken()
    {
        // TODO: uncomment below to test the method and replace null with proper value
        // $deviceId = null;
        // $deleteDeviceToken = static::$devices_api->DeleteDeviceToken($deviceId);
        // $this->assertInstanceOf('ArtikCloud\Model\DeviceTokenEnvelope', $deleteDeviceToken, 'Response must be an instance of ArtikCloud\Model\DeviceTokenEnvelope');

    }

    /**
     * Test case for getDevice
     *
     * Get Device.
     *
     */
    public function testGetDevice()
    {

        // TODO: uncomment below to test the method and replace null with proper value
        // $deviceId = null;
        // $deviceEnvelope = static::$devices_api->GetDevice($deviceId);
        // $this->assertInstanceOf('ArtikCloud\Model\DeviceEnvelope', $deviceEnvelope, 'Response must be an instance of ArtikCloud\Model\DeviceEnvelope');

    }

    /**
     * Test case for getDevicePresence
     *
     * Get device presence information.
     *
     */
    public function testGetDevicePresence()
    {

        $deviceId = static::$artikParams['device1']['id'];
        $presenceEnvelope = static::$devices_api->GetDevicePresence($deviceId);

        $data = $presenceEnvelope->getData();
        $sdid = $presenceEnvelope->getSdid();

        $this->assertEquals($deviceId, $sdid, 'Sdids must match');
        $this->assertNotNull($data->getLastSeenOn(), 'lastSeenOn');
        $this->assertNotNull($data->getConnected(), 'connected');

    }

    /**
     * Test case for getDeviceToken
     *
     * Get Device Token.
     *
     */
    public function testGetDeviceToken()
    {

    }

    /**
     * Test case for updateDevice
     *
     * Update Device.
     *
     */
    public function testUpdateDevice()
    {

    }

    /**
     * Test case for updateDeviceToken
     *
     * Update Device Token.
     *
     */
    public function testUpdateDeviceToken()
    {

    }

}
