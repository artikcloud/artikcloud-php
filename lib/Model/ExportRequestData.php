<?php
/**
 * ExportRequestData
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Model;

use \ArrayAccess;
/**
 * ExportRequestData Class Doc Comment
 *
 * @category    Class
 * @description Export Request Data.
 * @package     ArtikCloud
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ExportRequestData implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'csv_headers' => 'bool',
        'end_date' => 'int',
        'export_id' => 'string',
        'format' => 'string',
        'order' => 'string',
        'sdids' => 'string',
        'sdtids' => 'string',
        'start_date' => 'int',
        'trial_id' => 'string',
        'uids' => 'string',
        'url' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'csv_headers' => 'csvHeaders',
        'end_date' => 'endDate',
        'export_id' => 'exportId',
        'format' => 'format',
        'order' => 'order',
        'sdids' => 'sdids',
        'sdtids' => 'sdtids',
        'start_date' => 'startDate',
        'trial_id' => 'trialId',
        'uids' => 'uids',
        'url' => 'url'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'csv_headers' => 'setCsvHeaders',
        'end_date' => 'setEndDate',
        'export_id' => 'setExportId',
        'format' => 'setFormat',
        'order' => 'setOrder',
        'sdids' => 'setSdids',
        'sdtids' => 'setSdtids',
        'start_date' => 'setStartDate',
        'trial_id' => 'setTrialId',
        'uids' => 'setUids',
        'url' => 'setUrl'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'csv_headers' => 'getCsvHeaders',
        'end_date' => 'getEndDate',
        'export_id' => 'getExportId',
        'format' => 'getFormat',
        'order' => 'getOrder',
        'sdids' => 'getSdids',
        'sdtids' => 'getSdtids',
        'start_date' => 'getStartDate',
        'trial_id' => 'getTrialId',
        'uids' => 'getUids',
        'url' => 'getUrl'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $csv_headers Add header to csv format
      * @var bool
      */
    protected $csv_headers;
    
    /**
      * $end_date Timestamp of latest message (in milliseconds since epoch).
      * @var int
      */
    protected $end_date;
    
    /**
      * $export_id Returned Export ID that should be used to check status and get the export result.
      * @var string
      */
    protected $export_id;
    
    /**
      * $format Format of the export.
      * @var string
      */
    protected $format;
    
    /**
      * $order Ascending or descending sort order.
      * @var string
      */
    protected $order;
    
    /**
      * $sdids Source Device IDs being searched for messages (Comma-separated for multiple Device IDs).
      * @var string
      */
    protected $sdids;
    
    /**
      * $sdtids Source Device Type IDs being searched for messages (Comma-separated for multiple Device Type IDs).
      * @var string
      */
    protected $sdtids;
    
    /**
      * $start_date Timestamp of earliest message (in milliseconds since epoch).
      * @var int
      */
    protected $start_date;
    
    /**
      * $trial_id Trial ID being searched for messages.
      * @var string
      */
    protected $trial_id;
    
    /**
      * $uids Owner's user IDs being searched for messages (Comma-separated for multiple User IDs).
      * @var string
      */
    protected $uids;
    
    /**
      * $url URL added to successful email message.
      * @var string
      */
    protected $url;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->csv_headers = $data["csv_headers"];
            $this->end_date = $data["end_date"];
            $this->export_id = $data["export_id"];
            $this->format = $data["format"];
            $this->order = $data["order"];
            $this->sdids = $data["sdids"];
            $this->sdtids = $data["sdtids"];
            $this->start_date = $data["start_date"];
            $this->trial_id = $data["trial_id"];
            $this->uids = $data["uids"];
            $this->url = $data["url"];
        }
    }
    
    /**
     * Gets csv_headers
     * @return bool
     */
    public function getCsvHeaders()
    {
        return $this->csv_headers;
    }
  
    /**
     * Sets csv_headers
     * @param bool $csv_headers Add header to csv format
     * @return $this
     */
    public function setCsvHeaders($csv_headers)
    {
        
        $this->csv_headers = $csv_headers;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return int
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param int $end_date Timestamp of latest message (in milliseconds since epoch).
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Gets export_id
     * @return string
     */
    public function getExportId()
    {
        return $this->export_id;
    }
  
    /**
     * Sets export_id
     * @param string $export_id Returned Export ID that should be used to check status and get the export result.
     * @return $this
     */
    public function setExportId($export_id)
    {
        
        $this->export_id = $export_id;
        return $this;
    }
    
    /**
     * Gets format
     * @return string
     */
    public function getFormat()
    {
        return $this->format;
    }
  
    /**
     * Sets format
     * @param string $format Format of the export.
     * @return $this
     */
    public function setFormat($format)
    {
        
        $this->format = $format;
        return $this;
    }
    
    /**
     * Gets order
     * @return string
     */
    public function getOrder()
    {
        return $this->order;
    }
  
    /**
     * Sets order
     * @param string $order Ascending or descending sort order.
     * @return $this
     */
    public function setOrder($order)
    {
        
        $this->order = $order;
        return $this;
    }
    
    /**
     * Gets sdids
     * @return string
     */
    public function getSdids()
    {
        return $this->sdids;
    }
  
    /**
     * Sets sdids
     * @param string $sdids Source Device IDs being searched for messages (Comma-separated for multiple Device IDs).
     * @return $this
     */
    public function setSdids($sdids)
    {
        
        $this->sdids = $sdids;
        return $this;
    }
    
    /**
     * Gets sdtids
     * @return string
     */
    public function getSdtids()
    {
        return $this->sdtids;
    }
  
    /**
     * Sets sdtids
     * @param string $sdtids Source Device Type IDs being searched for messages (Comma-separated for multiple Device Type IDs).
     * @return $this
     */
    public function setSdtids($sdtids)
    {
        
        $this->sdtids = $sdtids;
        return $this;
    }
    
    /**
     * Gets start_date
     * @return int
     */
    public function getStartDate()
    {
        return $this->start_date;
    }
  
    /**
     * Sets start_date
     * @param int $start_date Timestamp of earliest message (in milliseconds since epoch).
     * @return $this
     */
    public function setStartDate($start_date)
    {
        
        $this->start_date = $start_date;
        return $this;
    }
    
    /**
     * Gets trial_id
     * @return string
     */
    public function getTrialId()
    {
        return $this->trial_id;
    }
  
    /**
     * Sets trial_id
     * @param string $trial_id Trial ID being searched for messages.
     * @return $this
     */
    public function setTrialId($trial_id)
    {
        
        $this->trial_id = $trial_id;
        return $this;
    }
    
    /**
     * Gets uids
     * @return string
     */
    public function getUids()
    {
        return $this->uids;
    }
  
    /**
     * Sets uids
     * @param string $uids Owner's user IDs being searched for messages (Comma-separated for multiple User IDs).
     * @return $this
     */
    public function setUids($uids)
    {
        
        $this->uids = $uids;
        return $this;
    }
    
    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }
  
    /**
     * Sets url
     * @param string $url URL added to successful email message.
     * @return $this
     */
    public function setUrl($url)
    {
        
        $this->url = $url;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
