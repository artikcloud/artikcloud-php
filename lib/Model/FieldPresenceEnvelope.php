<?php
/**
 * FieldPresenceEnvelope
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Model;

use \ArrayAccess;
/**
 * FieldPresenceEnvelope Class Doc Comment
 *
 * @category    Class
 * @description Field Presence Envelope
 * @package     ArtikCloud
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FieldPresenceEnvelope implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'sdid' => 'string',
        'field_presence' => 'string',
        'start_date' => 'int',
        'end_date' => 'int',
        'interval' => 'string',
        'size' => 'int',
        'data' => '\ArtikCloud\Model\FieldPresence[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'sdid' => 'sdid',
        'field_presence' => 'fieldPresence',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'interval' => 'interval',
        'size' => 'size',
        'data' => 'data'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'sdid' => 'setSdid',
        'field_presence' => 'setFieldPresence',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'interval' => 'setInterval',
        'size' => 'setSize',
        'data' => 'setData'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'sdid' => 'getSdid',
        'field_presence' => 'getFieldPresence',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'interval' => 'getInterval',
        'size' => 'getSize',
        'data' => 'getData'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $sdid 
      * @var string
      */
    protected $sdid;
    
    /**
      * $field_presence 
      * @var string
      */
    protected $field_presence;
    
    /**
      * $start_date 
      * @var int
      */
    protected $start_date;
    
    /**
      * $end_date 
      * @var int
      */
    protected $end_date;
    
    /**
      * $interval 
      * @var string
      */
    protected $interval;
    
    /**
      * $size 
      * @var int
      */
    protected $size;
    
    /**
      * $data 
      * @var \ArtikCloud\Model\FieldPresence[]
      */
    protected $data;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->sdid = $data["sdid"];
            $this->field_presence = $data["field_presence"];
            $this->start_date = $data["start_date"];
            $this->end_date = $data["end_date"];
            $this->interval = $data["interval"];
            $this->size = $data["size"];
            $this->data = $data["data"];
        }
    }
    
    /**
     * Gets sdid
     * @return string
     */
    public function getSdid()
    {
        return $this->sdid;
    }
  
    /**
     * Sets sdid
     * @param string $sdid 
     * @return $this
     */
    public function setSdid($sdid)
    {
        
        $this->sdid = $sdid;
        return $this;
    }
    
    /**
     * Gets field_presence
     * @return string
     */
    public function getFieldPresence()
    {
        return $this->field_presence;
    }
  
    /**
     * Sets field_presence
     * @param string $field_presence 
     * @return $this
     */
    public function setFieldPresence($field_presence)
    {
        
        $this->field_presence = $field_presence;
        return $this;
    }
    
    /**
     * Gets start_date
     * @return int
     */
    public function getStartDate()
    {
        return $this->start_date;
    }
  
    /**
     * Sets start_date
     * @param int $start_date 
     * @return $this
     */
    public function setStartDate($start_date)
    {
        
        $this->start_date = $start_date;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return int
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param int $end_date 
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Gets interval
     * @return string
     */
    public function getInterval()
    {
        return $this->interval;
    }
  
    /**
     * Sets interval
     * @param string $interval 
     * @return $this
     */
    public function setInterval($interval)
    {
        
        $this->interval = $interval;
        return $this;
    }
    
    /**
     * Gets size
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }
  
    /**
     * Sets size
     * @param int $size 
     * @return $this
     */
    public function setSize($size)
    {
        
        $this->size = $size;
        return $this;
    }
    
    /**
     * Gets data
     * @return \ArtikCloud\Model\FieldPresence[]
     */
    public function getData()
    {
        return $this->data;
    }
  
    /**
     * Sets data
     * @param \ArtikCloud\Model\FieldPresence[] $data 
     * @return $this
     */
    public function setData($data)
    {
        
        $this->data = $data;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
