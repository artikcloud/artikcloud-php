<?php
/**
 * UnregisterDeviceResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Model;

use \ArrayAccess;
/**
 * UnregisterDeviceResponse Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     ArtikCloud
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UnregisterDeviceResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'certificate_info' => 'string',
        'certificate_signature' => 'string',
        'created_on' => 'int',
        'dtid' => 'string',
        'eid' => 'string',
        'id' => 'string',
        'manifest_version' => 'int',
        'manifest_version_policy' => 'string',
        'name' => 'string',
        'need_provider_auth' => 'bool',
        'uid' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'certificate_info' => 'certificateInfo',
        'certificate_signature' => 'certificateSignature',
        'created_on' => 'createdOn',
        'dtid' => 'dtid',
        'eid' => 'eid',
        'id' => 'id',
        'manifest_version' => 'manifestVersion',
        'manifest_version_policy' => 'manifestVersionPolicy',
        'name' => 'name',
        'need_provider_auth' => 'needProviderAuth',
        'uid' => 'uid'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'certificate_info' => 'setCertificateInfo',
        'certificate_signature' => 'setCertificateSignature',
        'created_on' => 'setCreatedOn',
        'dtid' => 'setDtid',
        'eid' => 'setEid',
        'id' => 'setId',
        'manifest_version' => 'setManifestVersion',
        'manifest_version_policy' => 'setManifestVersionPolicy',
        'name' => 'setName',
        'need_provider_auth' => 'setNeedProviderAuth',
        'uid' => 'setUid'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'certificate_info' => 'getCertificateInfo',
        'certificate_signature' => 'getCertificateSignature',
        'created_on' => 'getCreatedOn',
        'dtid' => 'getDtid',
        'eid' => 'getEid',
        'id' => 'getId',
        'manifest_version' => 'getManifestVersion',
        'manifest_version_policy' => 'getManifestVersionPolicy',
        'name' => 'getName',
        'need_provider_auth' => 'getNeedProviderAuth',
        'uid' => 'getUid'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $certificate_info Device certificate information.
      * @var string
      */
    protected $certificate_info;
    
    /**
      * $certificate_signature Certificate's signature.
      * @var string
      */
    protected $certificate_signature;
    
    /**
      * $created_on Device created on date.
      * @var int
      */
    protected $created_on;
    
    /**
      * $dtid Device type id.
      * @var string
      */
    protected $dtid;
    
    /**
      * $eid External ID of the device.
      * @var string
      */
    protected $eid;
    
    /**
      * $id Device id.
      * @var string
      */
    protected $id;
    
    /**
      * $manifest_version Device manifest version.
      * @var int
      */
    protected $manifest_version;
    
    /**
      * $manifest_version_policy Device manifest version policy.
      * @var string
      */
    protected $manifest_version_policy;
    
    /**
      * $name Device name.
      * @var string
      */
    protected $name;
    
    /**
      * $need_provider_auth Device need provider auth.
      * @var bool
      */
    protected $need_provider_auth;
    
    /**
      * $uid User id.
      * @var string
      */
    protected $uid;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->certificate_info = $data["certificate_info"];
            $this->certificate_signature = $data["certificate_signature"];
            $this->created_on = $data["created_on"];
            $this->dtid = $data["dtid"];
            $this->eid = $data["eid"];
            $this->id = $data["id"];
            $this->manifest_version = $data["manifest_version"];
            $this->manifest_version_policy = $data["manifest_version_policy"];
            $this->name = $data["name"];
            $this->need_provider_auth = $data["need_provider_auth"];
            $this->uid = $data["uid"];
        }
    }
    
    /**
     * Gets certificate_info
     * @return string
     */
    public function getCertificateInfo()
    {
        return $this->certificate_info;
    }
  
    /**
     * Sets certificate_info
     * @param string $certificate_info Device certificate information.
     * @return $this
     */
    public function setCertificateInfo($certificate_info)
    {
        
        $this->certificate_info = $certificate_info;
        return $this;
    }
    
    /**
     * Gets certificate_signature
     * @return string
     */
    public function getCertificateSignature()
    {
        return $this->certificate_signature;
    }
  
    /**
     * Sets certificate_signature
     * @param string $certificate_signature Certificate's signature.
     * @return $this
     */
    public function setCertificateSignature($certificate_signature)
    {
        
        $this->certificate_signature = $certificate_signature;
        return $this;
    }
    
    /**
     * Gets created_on
     * @return int
     */
    public function getCreatedOn()
    {
        return $this->created_on;
    }
  
    /**
     * Sets created_on
     * @param int $created_on Device created on date.
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        
        $this->created_on = $created_on;
        return $this;
    }
    
    /**
     * Gets dtid
     * @return string
     */
    public function getDtid()
    {
        return $this->dtid;
    }
  
    /**
     * Sets dtid
     * @param string $dtid Device type id.
     * @return $this
     */
    public function setDtid($dtid)
    {
        
        $this->dtid = $dtid;
        return $this;
    }
    
    /**
     * Gets eid
     * @return string
     */
    public function getEid()
    {
        return $this->eid;
    }
  
    /**
     * Sets eid
     * @param string $eid External ID of the device.
     * @return $this
     */
    public function setEid($eid)
    {
        
        $this->eid = $eid;
        return $this;
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Device id.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets manifest_version
     * @return int
     */
    public function getManifestVersion()
    {
        return $this->manifest_version;
    }
  
    /**
     * Sets manifest_version
     * @param int $manifest_version Device manifest version.
     * @return $this
     */
    public function setManifestVersion($manifest_version)
    {
        
        $this->manifest_version = $manifest_version;
        return $this;
    }
    
    /**
     * Gets manifest_version_policy
     * @return string
     */
    public function getManifestVersionPolicy()
    {
        return $this->manifest_version_policy;
    }
  
    /**
     * Sets manifest_version_policy
     * @param string $manifest_version_policy Device manifest version policy.
     * @return $this
     */
    public function setManifestVersionPolicy($manifest_version_policy)
    {
        
        $this->manifest_version_policy = $manifest_version_policy;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Device name.
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets need_provider_auth
     * @return bool
     */
    public function getNeedProviderAuth()
    {
        return $this->need_provider_auth;
    }
  
    /**
     * Sets need_provider_auth
     * @param bool $need_provider_auth Device need provider auth.
     * @return $this
     */
    public function setNeedProviderAuth($need_provider_auth)
    {
        
        $this->need_provider_auth = $need_provider_auth;
        return $this;
    }
    
    /**
     * Gets uid
     * @return string
     */
    public function getUid()
    {
        return $this->uid;
    }
  
    /**
     * Sets uid
     * @param string $uid User id.
     * @return $this
     */
    public function setUid($uid)
    {
        
        $this->uid = $uid;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
