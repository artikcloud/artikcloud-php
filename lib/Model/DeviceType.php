<?php
/**
 * DeviceType
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Model;

use \ArrayAccess;
/**
 * DeviceType Class Doc Comment
 *
 * @category    Class
 * @description Device Type Information
 * @package     ArtikCloud
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DeviceType implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'unique_name' => 'string',
        'latest_version' => 'int',
        'last_updated' => 'int',
        'name' => 'string',
        'description' => 'string',
        'uid' => 'string',
        'oid' => 'string',
        'has_cloud_connector' => 'bool',
        'approved' => 'bool',
        'published' => 'bool',
        'protected' => 'bool',
        'in_store' => 'bool',
        'owned_by_current_user' => 'bool',
        'tags' => '\ArtikCloud\Model\Tag[]',
        'rsp' => 'bool',
        'issuer_dn' => 'string',
        'vid' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'unique_name' => 'uniqueName',
        'latest_version' => 'latestVersion',
        'last_updated' => 'lastUpdated',
        'name' => 'name',
        'description' => 'description',
        'uid' => 'uid',
        'oid' => 'oid',
        'has_cloud_connector' => 'hasCloudConnector',
        'approved' => 'approved',
        'published' => 'published',
        'protected' => 'protected',
        'in_store' => 'inStore',
        'owned_by_current_user' => 'ownedByCurrentUser',
        'tags' => 'tags',
        'rsp' => 'rsp',
        'issuer_dn' => 'issuerDn',
        'vid' => 'vid'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'unique_name' => 'setUniqueName',
        'latest_version' => 'setLatestVersion',
        'last_updated' => 'setLastUpdated',
        'name' => 'setName',
        'description' => 'setDescription',
        'uid' => 'setUid',
        'oid' => 'setOid',
        'has_cloud_connector' => 'setHasCloudConnector',
        'approved' => 'setApproved',
        'published' => 'setPublished',
        'protected' => 'setProtected',
        'in_store' => 'setInStore',
        'owned_by_current_user' => 'setOwnedByCurrentUser',
        'tags' => 'setTags',
        'rsp' => 'setRsp',
        'issuer_dn' => 'setIssuerDn',
        'vid' => 'setVid'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'unique_name' => 'getUniqueName',
        'latest_version' => 'getLatestVersion',
        'last_updated' => 'getLastUpdated',
        'name' => 'getName',
        'description' => 'getDescription',
        'uid' => 'getUid',
        'oid' => 'getOid',
        'has_cloud_connector' => 'getHasCloudConnector',
        'approved' => 'getApproved',
        'published' => 'getPublished',
        'protected' => 'getProtected',
        'in_store' => 'getInStore',
        'owned_by_current_user' => 'getOwnedByCurrentUser',
        'tags' => 'getTags',
        'rsp' => 'getRsp',
        'issuer_dn' => 'getIssuerDn',
        'vid' => 'getVid'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id Device Type ID.
      * @var string
      */
    protected $id;
    
    /**
      * $unique_name Unique Name.
      * @var string
      */
    protected $unique_name;
    
    /**
      * $latest_version Latest Manifest version.
      * @var int
      */
    protected $latest_version;
    
    /**
      * $last_updated 
      * @var int
      */
    protected $last_updated;
    
    /**
      * $name Name.
      * @var string
      */
    protected $name;
    
    /**
      * $description Description.
      * @var string
      */
    protected $description;
    
    /**
      * $uid User ID.
      * @var string
      */
    protected $uid;
    
    /**
      * $oid Organization ID.
      * @var string
      */
    protected $oid;
    
    /**
      * $has_cloud_connector Uses Cloud Connectors SDK
      * @var bool
      */
    protected $has_cloud_connector;
    
    /**
      * $approved Approval status.
      * @var bool
      */
    protected $approved;
    
    /**
      * $published Published status.
      * @var bool
      */
    protected $published;
    
    /**
      * $protected Protected status.
      * @var bool
      */
    protected $protected;
    
    /**
      * $in_store In Store.
      * @var bool
      */
    protected $in_store;
    
    /**
      * $owned_by_current_user Does the current user own a device of this device type
      * @var bool
      */
    protected $owned_by_current_user;
    
    /**
      * $tags Tags
      * @var \ArtikCloud\Model\Tag[]
      */
    protected $tags;
    
    /**
      * $rsp Require Secure Device Registration (SDR) Protocol.
      * @var bool
      */
    protected $rsp;
    
    /**
      * $issuer_dn Issuer Distinguished Name (Used in SDR)
      * @var string
      */
    protected $issuer_dn;
    
    /**
      * $vid Vendor ID. (Used in SDR)
      * @var string
      */
    protected $vid;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->unique_name = $data["unique_name"];
            $this->latest_version = $data["latest_version"];
            $this->last_updated = $data["last_updated"];
            $this->name = $data["name"];
            $this->description = $data["description"];
            $this->uid = $data["uid"];
            $this->oid = $data["oid"];
            $this->has_cloud_connector = $data["has_cloud_connector"];
            $this->approved = $data["approved"];
            $this->published = $data["published"];
            $this->protected = $data["protected"];
            $this->in_store = $data["in_store"];
            $this->owned_by_current_user = $data["owned_by_current_user"];
            $this->tags = $data["tags"];
            $this->rsp = $data["rsp"];
            $this->issuer_dn = $data["issuer_dn"];
            $this->vid = $data["vid"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Device Type ID.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets unique_name
     * @return string
     */
    public function getUniqueName()
    {
        return $this->unique_name;
    }
  
    /**
     * Sets unique_name
     * @param string $unique_name Unique Name.
     * @return $this
     */
    public function setUniqueName($unique_name)
    {
        
        $this->unique_name = $unique_name;
        return $this;
    }
    
    /**
     * Gets latest_version
     * @return int
     */
    public function getLatestVersion()
    {
        return $this->latest_version;
    }
  
    /**
     * Sets latest_version
     * @param int $latest_version Latest Manifest version.
     * @return $this
     */
    public function setLatestVersion($latest_version)
    {
        
        $this->latest_version = $latest_version;
        return $this;
    }
    
    /**
     * Gets last_updated
     * @return int
     */
    public function getLastUpdated()
    {
        return $this->last_updated;
    }
  
    /**
     * Sets last_updated
     * @param int $last_updated 
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        
        $this->last_updated = $last_updated;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Name.
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description Description.
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets uid
     * @return string
     */
    public function getUid()
    {
        return $this->uid;
    }
  
    /**
     * Sets uid
     * @param string $uid User ID.
     * @return $this
     */
    public function setUid($uid)
    {
        
        $this->uid = $uid;
        return $this;
    }
    
    /**
     * Gets oid
     * @return string
     */
    public function getOid()
    {
        return $this->oid;
    }
  
    /**
     * Sets oid
     * @param string $oid Organization ID.
     * @return $this
     */
    public function setOid($oid)
    {
        
        $this->oid = $oid;
        return $this;
    }
    
    /**
     * Gets has_cloud_connector
     * @return bool
     */
    public function getHasCloudConnector()
    {
        return $this->has_cloud_connector;
    }
  
    /**
     * Sets has_cloud_connector
     * @param bool $has_cloud_connector Uses Cloud Connectors SDK
     * @return $this
     */
    public function setHasCloudConnector($has_cloud_connector)
    {
        
        $this->has_cloud_connector = $has_cloud_connector;
        return $this;
    }
    
    /**
     * Gets approved
     * @return bool
     */
    public function getApproved()
    {
        return $this->approved;
    }
  
    /**
     * Sets approved
     * @param bool $approved Approval status.
     * @return $this
     */
    public function setApproved($approved)
    {
        
        $this->approved = $approved;
        return $this;
    }
    
    /**
     * Gets published
     * @return bool
     */
    public function getPublished()
    {
        return $this->published;
    }
  
    /**
     * Sets published
     * @param bool $published Published status.
     * @return $this
     */
    public function setPublished($published)
    {
        
        $this->published = $published;
        return $this;
    }
    
    /**
     * Gets protected
     * @return bool
     */
    public function getProtected()
    {
        return $this->protected;
    }
  
    /**
     * Sets protected
     * @param bool $protected Protected status.
     * @return $this
     */
    public function setProtected($protected)
    {
        
        $this->protected = $protected;
        return $this;
    }
    
    /**
     * Gets in_store
     * @return bool
     */
    public function getInStore()
    {
        return $this->in_store;
    }
  
    /**
     * Sets in_store
     * @param bool $in_store In Store.
     * @return $this
     */
    public function setInStore($in_store)
    {
        
        $this->in_store = $in_store;
        return $this;
    }
    
    /**
     * Gets owned_by_current_user
     * @return bool
     */
    public function getOwnedByCurrentUser()
    {
        return $this->owned_by_current_user;
    }
  
    /**
     * Sets owned_by_current_user
     * @param bool $owned_by_current_user Does the current user own a device of this device type
     * @return $this
     */
    public function setOwnedByCurrentUser($owned_by_current_user)
    {
        
        $this->owned_by_current_user = $owned_by_current_user;
        return $this;
    }
    
    /**
     * Gets tags
     * @return \ArtikCloud\Model\Tag[]
     */
    public function getTags()
    {
        return $this->tags;
    }
  
    /**
     * Sets tags
     * @param \ArtikCloud\Model\Tag[] $tags Tags
     * @return $this
     */
    public function setTags($tags)
    {
        
        $this->tags = $tags;
        return $this;
    }
    
    /**
     * Gets rsp
     * @return bool
     */
    public function getRsp()
    {
        return $this->rsp;
    }
  
    /**
     * Sets rsp
     * @param bool $rsp Require Secure Device Registration (SDR) Protocol.
     * @return $this
     */
    public function setRsp($rsp)
    {
        
        $this->rsp = $rsp;
        return $this;
    }
    
    /**
     * Gets issuer_dn
     * @return string
     */
    public function getIssuerDn()
    {
        return $this->issuer_dn;
    }
  
    /**
     * Sets issuer_dn
     * @param string $issuer_dn Issuer Distinguished Name (Used in SDR)
     * @return $this
     */
    public function setIssuerDn($issuer_dn)
    {
        
        $this->issuer_dn = $issuer_dn;
        return $this;
    }
    
    /**
     * Gets vid
     * @return string
     */
    public function getVid()
    {
        return $this->vid;
    }
  
    /**
     * Sets vid
     * @param string $vid Vendor ID. (Used in SDR)
     * @return $this
     */
    public function setVid($vid)
    {
        
        $this->vid = $vid;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
