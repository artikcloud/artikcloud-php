<?php
/**
 * DeviceType
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\ArtikCloud\Model;

use \ArrayAccess;

/**
 * DeviceType Class Doc Comment
 *
 * @category    Class
 * @description Device Type Information
 * @package     ArtikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DeviceType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DeviceType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'unique_name' => 'string',
        'latest_version' => 'int',
        'last_updated' => 'int',
        'name' => 'string',
        'description' => 'string',
        'uid' => 'string',
        'oid' => 'string',
        'has_cloud_connector' => 'bool',
        'approved' => 'bool',
        'published' => 'bool',
        'protected' => 'bool',
        'in_store' => 'bool',
        'owned_by_current_user' => 'bool',
        'tags' => '\ArtikCloud\ArtikCloud\Model\Tag[]',
        'rsp' => 'bool',
        'issuer_dn' => 'string',
        'vid' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'unique_name' => 'uniqueName',
        'latest_version' => 'latestVersion',
        'last_updated' => 'lastUpdated',
        'name' => 'name',
        'description' => 'description',
        'uid' => 'uid',
        'oid' => 'oid',
        'has_cloud_connector' => 'hasCloudConnector',
        'approved' => 'approved',
        'published' => 'published',
        'protected' => 'protected',
        'in_store' => 'inStore',
        'owned_by_current_user' => 'ownedByCurrentUser',
        'tags' => 'tags',
        'rsp' => 'rsp',
        'issuer_dn' => 'issuerDn',
        'vid' => 'vid'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'unique_name' => 'setUniqueName',
        'latest_version' => 'setLatestVersion',
        'last_updated' => 'setLastUpdated',
        'name' => 'setName',
        'description' => 'setDescription',
        'uid' => 'setUid',
        'oid' => 'setOid',
        'has_cloud_connector' => 'setHasCloudConnector',
        'approved' => 'setApproved',
        'published' => 'setPublished',
        'protected' => 'setProtected',
        'in_store' => 'setInStore',
        'owned_by_current_user' => 'setOwnedByCurrentUser',
        'tags' => 'setTags',
        'rsp' => 'setRsp',
        'issuer_dn' => 'setIssuerDn',
        'vid' => 'setVid'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'unique_name' => 'getUniqueName',
        'latest_version' => 'getLatestVersion',
        'last_updated' => 'getLastUpdated',
        'name' => 'getName',
        'description' => 'getDescription',
        'uid' => 'getUid',
        'oid' => 'getOid',
        'has_cloud_connector' => 'getHasCloudConnector',
        'approved' => 'getApproved',
        'published' => 'getPublished',
        'protected' => 'getProtected',
        'in_store' => 'getInStore',
        'owned_by_current_user' => 'getOwnedByCurrentUser',
        'tags' => 'getTags',
        'rsp' => 'getRsp',
        'issuer_dn' => 'getIssuerDn',
        'vid' => 'getVid'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['unique_name'] = isset($data['unique_name']) ? $data['unique_name'] : null;
        $this->container['latest_version'] = isset($data['latest_version']) ? $data['latest_version'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['oid'] = isset($data['oid']) ? $data['oid'] : null;
        $this->container['has_cloud_connector'] = isset($data['has_cloud_connector']) ? $data['has_cloud_connector'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['protected'] = isset($data['protected']) ? $data['protected'] : null;
        $this->container['in_store'] = isset($data['in_store']) ? $data['in_store'] : null;
        $this->container['owned_by_current_user'] = isset($data['owned_by_current_user']) ? $data['owned_by_current_user'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['rsp'] = isset($data['rsp']) ? $data['rsp'] : null;
        $this->container['issuer_dn'] = isset($data['issuer_dn']) ? $data['issuer_dn'] : null;
        $this->container['vid'] = isset($data['vid']) ? $data['vid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Device Type ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets unique_name
     * @return string
     */
    public function getUniqueName()
    {
        return $this->container['unique_name'];
    }

    /**
     * Sets unique_name
     * @param string $unique_name Unique Name.
     * @return $this
     */
    public function setUniqueName($unique_name)
    {
        $this->container['unique_name'] = $unique_name;

        return $this;
    }

    /**
     * Gets latest_version
     * @return int
     */
    public function getLatestVersion()
    {
        return $this->container['latest_version'];
    }

    /**
     * Sets latest_version
     * @param int $latest_version Latest Manifest version.
     * @return $this
     */
    public function setLatestVersion($latest_version)
    {
        $this->container['latest_version'] = $latest_version;

        return $this;
    }

    /**
     * Gets last_updated
     * @return int
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     * @param int $last_updated
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets uid
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     * @param string $uid User ID.
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets oid
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     * @param string $oid Organization ID.
     * @return $this
     */
    public function setOid($oid)
    {
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets has_cloud_connector
     * @return bool
     */
    public function getHasCloudConnector()
    {
        return $this->container['has_cloud_connector'];
    }

    /**
     * Sets has_cloud_connector
     * @param bool $has_cloud_connector Uses Cloud Connectors SDK
     * @return $this
     */
    public function setHasCloudConnector($has_cloud_connector)
    {
        $this->container['has_cloud_connector'] = $has_cloud_connector;

        return $this;
    }

    /**
     * Gets approved
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     * @param bool $approved Approval status.
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets published
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     * @param bool $published Published status.
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets protected
     * @return bool
     */
    public function getProtected()
    {
        return $this->container['protected'];
    }

    /**
     * Sets protected
     * @param bool $protected Protected status.
     * @return $this
     */
    public function setProtected($protected)
    {
        $this->container['protected'] = $protected;

        return $this;
    }

    /**
     * Gets in_store
     * @return bool
     */
    public function getInStore()
    {
        return $this->container['in_store'];
    }

    /**
     * Sets in_store
     * @param bool $in_store In Store.
     * @return $this
     */
    public function setInStore($in_store)
    {
        $this->container['in_store'] = $in_store;

        return $this;
    }

    /**
     * Gets owned_by_current_user
     * @return bool
     */
    public function getOwnedByCurrentUser()
    {
        return $this->container['owned_by_current_user'];
    }

    /**
     * Sets owned_by_current_user
     * @param bool $owned_by_current_user Does the current user own a device of this device type
     * @return $this
     */
    public function setOwnedByCurrentUser($owned_by_current_user)
    {
        $this->container['owned_by_current_user'] = $owned_by_current_user;

        return $this;
    }

    /**
     * Gets tags
     * @return \ArtikCloud\ArtikCloud\Model\Tag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \ArtikCloud\ArtikCloud\Model\Tag[] $tags Tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets rsp
     * @return bool
     */
    public function getRsp()
    {
        return $this->container['rsp'];
    }

    /**
     * Sets rsp
     * @param bool $rsp Require Secure Device Registration (SDR) Protocol.
     * @return $this
     */
    public function setRsp($rsp)
    {
        $this->container['rsp'] = $rsp;

        return $this;
    }

    /**
     * Gets issuer_dn
     * @return string
     */
    public function getIssuerDn()
    {
        return $this->container['issuer_dn'];
    }

    /**
     * Sets issuer_dn
     * @param string $issuer_dn Issuer Distinguished Name (Used in SDR)
     * @return $this
     */
    public function setIssuerDn($issuer_dn)
    {
        $this->container['issuer_dn'] = $issuer_dn;

        return $this;
    }

    /**
     * Gets vid
     * @return string
     */
    public function getVid()
    {
        return $this->container['vid'];
    }

    /**
     * Sets vid
     * @param string $vid Vendor ID. (Used in SDR)
     * @return $this
     */
    public function setVid($vid)
    {
        $this->container['vid'] = $vid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


