<?php
/**
 * TaskByDid
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Model;

use \ArrayAccess;

/**
 * TaskByDid Class Doc Comment
 *
 * @category    Class */
 // @description 
/** 
 * @package     ArtikCloud
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaskByDid implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TaskByDid';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'filter' => 'string',
        'task_type' => 'string',
        'modified_on' => 'int',
        'dtid' => 'string',
        'status_counts' => '\ArtikCloud\Model\TaskStatusCounts',
        'property' => 'string',
        'statuses' => '\ArtikCloud\Model\DeviceTask[]',
        'id' => 'string',
        'dids' => 'string[]',
        'task_parameters' => '\ArtikCloud\Model\TaskParameters',
        'created_on' => 'int',
        'status' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'filter' => 'filter',
        'task_type' => 'taskType',
        'modified_on' => 'modifiedOn',
        'dtid' => 'dtid',
        'status_counts' => 'statusCounts',
        'property' => 'property',
        'statuses' => 'statuses',
        'id' => 'id',
        'dids' => 'dids',
        'task_parameters' => 'taskParameters',
        'created_on' => 'createdOn',
        'status' => 'status'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'filter' => 'setFilter',
        'task_type' => 'setTaskType',
        'modified_on' => 'setModifiedOn',
        'dtid' => 'setDtid',
        'status_counts' => 'setStatusCounts',
        'property' => 'setProperty',
        'statuses' => 'setStatuses',
        'id' => 'setId',
        'dids' => 'setDids',
        'task_parameters' => 'setTaskParameters',
        'created_on' => 'setCreatedOn',
        'status' => 'setStatus'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'filter' => 'getFilter',
        'task_type' => 'getTaskType',
        'modified_on' => 'getModifiedOn',
        'dtid' => 'getDtid',
        'status_counts' => 'getStatusCounts',
        'property' => 'getProperty',
        'statuses' => 'getStatuses',
        'id' => 'getId',
        'dids' => 'getDids',
        'task_parameters' => 'getTaskParameters',
        'created_on' => 'getCreatedOn',
        'status' => 'getStatus'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['task_type'] = isset($data['task_type']) ? $data['task_type'] : null;
        $this->container['modified_on'] = isset($data['modified_on']) ? $data['modified_on'] : null;
        $this->container['dtid'] = isset($data['dtid']) ? $data['dtid'] : null;
        $this->container['status_counts'] = isset($data['status_counts']) ? $data['status_counts'] : null;
        $this->container['property'] = isset($data['property']) ? $data['property'] : null;
        $this->container['statuses'] = isset($data['statuses']) ? $data['statuses'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['dids'] = isset($data['dids']) ? $data['dids'] : null;
        $this->container['task_parameters'] = isset($data['task_parameters']) ? $data['task_parameters'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets filter
     * @return string
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     * @param string $filter Filter
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets task_type
     * @return string
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     * @param string $task_type Task type
     * @return $this
     */
    public function setTaskType($task_type)
    {
        $this->container['task_type'] = $task_type;

        return $this;
    }

    /**
     * Gets modified_on
     * @return int
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     * @param int $modified_on Modified on
     * @return $this
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets dtid
     * @return string
     */
    public function getDtid()
    {
        return $this->container['dtid'];
    }

    /**
     * Sets dtid
     * @param string $dtid Device Type ID
     * @return $this
     */
    public function setDtid($dtid)
    {
        $this->container['dtid'] = $dtid;

        return $this;
    }

    /**
     * Gets status_counts
     * @return \ArtikCloud\Model\TaskStatusCounts
     */
    public function getStatusCounts()
    {
        return $this->container['status_counts'];
    }

    /**
     * Sets status_counts
     * @param \ArtikCloud\Model\TaskStatusCounts $status_counts Status counts
     * @return $this
     */
    public function setStatusCounts($status_counts)
    {
        $this->container['status_counts'] = $status_counts;

        return $this;
    }

    /**
     * Gets property
     * @return string
     */
    public function getProperty()
    {
        return $this->container['property'];
    }

    /**
     * Sets property
     * @param string $property Property
     * @return $this
     */
    public function setProperty($property)
    {
        $this->container['property'] = $property;

        return $this;
    }

    /**
     * Gets statuses
     * @return \ArtikCloud\Model\DeviceTask[]
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     * @param \ArtikCloud\Model\DeviceTask[] $statuses Last known device task status for the specified did
     * @return $this
     */
    public function setStatuses($statuses)
    {
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Task ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets dids
     * @return string[]
     */
    public function getDids()
    {
        return $this->container['dids'];
    }

    /**
     * Sets dids
     * @param string[] $dids Device IDs
     * @return $this
     */
    public function setDids($dids)
    {
        $this->container['dids'] = $dids;

        return $this;
    }

    /**
     * Gets task_parameters
     * @return \ArtikCloud\Model\TaskParameters
     */
    public function getTaskParameters()
    {
        return $this->container['task_parameters'];
    }

    /**
     * Sets task_parameters
     * @param \ArtikCloud\Model\TaskParameters $task_parameters Task parameters
     * @return $this
     */
    public function setTaskParameters($task_parameters)
    {
        $this->container['task_parameters'] = $task_parameters;

        return $this;
    }

    /**
     * Gets created_on
     * @return int
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param int $created_on Created on
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


