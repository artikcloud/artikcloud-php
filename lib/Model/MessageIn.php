<?php
/**
 * MessageIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Model;

use \ArrayAccess;
/**
 * MessageIn Class Doc Comment
 *
 * @category    Class
 * @description Message sent to a WebSocket
 * @package     ArtikCloud
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MessageIn implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'data' => 'map[string,object]',
        'cid' => 'string',
        'ddid' => 'string',
        'sdid' => 'string',
        'ts' => 'int',
        'type' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'data' => 'data',
        'cid' => 'cid',
        'ddid' => 'ddid',
        'sdid' => 'sdid',
        'ts' => 'ts',
        'type' => 'type'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'data' => 'setData',
        'cid' => 'setCid',
        'ddid' => 'setDdid',
        'sdid' => 'setSdid',
        'ts' => 'setTs',
        'type' => 'setType'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'data' => 'getData',
        'cid' => 'getCid',
        'ddid' => 'getDdid',
        'sdid' => 'getSdid',
        'ts' => 'getTs',
        'type' => 'getType'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $data Message Payload.
      * @var map[string,object]
      */
    protected $data;
    
    /**
      * $cid Confirmation ID.
      * @var string
      */
    protected $cid;
    
    /**
      * $ddid Destination Device ID.
      * @var string
      */
    protected $ddid;
    
    /**
      * $sdid Source Device ID.
      * @var string
      */
    protected $sdid;
    
    /**
      * $ts Timestamp (past, present or future). Defaults to current time if not provided.
      * @var int
      */
    protected $ts;
    
    /**
      * $type Type.
      * @var string
      */
    protected $type = 'message';
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->data = $data["data"];
            $this->cid = $data["cid"];
            $this->ddid = $data["ddid"];
            $this->sdid = $data["sdid"];
            $this->ts = $data["ts"];
            $this->type = $data["type"];
        }
    }
    
    /**
     * Gets data
     * @return map[string,object]
     */
    public function getData()
    {
        return $this->data;
    }
  
    /**
     * Sets data
     * @param map[string,object] $data Message Payload.
     * @return $this
     */
    public function setData($data)
    {
        
        $this->data = $data;
        return $this;
    }
    
    /**
     * Gets cid
     * @return string
     */
    public function getCid()
    {
        return $this->cid;
    }
  
    /**
     * Sets cid
     * @param string $cid Confirmation ID.
     * @return $this
     */
    public function setCid($cid)
    {
        
        $this->cid = $cid;
        return $this;
    }
    
    /**
     * Gets ddid
     * @return string
     */
    public function getDdid()
    {
        return $this->ddid;
    }
  
    /**
     * Sets ddid
     * @param string $ddid Destination Device ID.
     * @return $this
     */
    public function setDdid($ddid)
    {
        
        $this->ddid = $ddid;
        return $this;
    }
    
    /**
     * Gets sdid
     * @return string
     */
    public function getSdid()
    {
        return $this->sdid;
    }
  
    /**
     * Sets sdid
     * @param string $sdid Source Device ID.
     * @return $this
     */
    public function setSdid($sdid)
    {
        
        $this->sdid = $sdid;
        return $this;
    }
    
    /**
     * Gets ts
     * @return int
     */
    public function getTs()
    {
        return $this->ts;
    }
  
    /**
     * Sets ts
     * @param int $ts Timestamp (past, present or future). Defaults to current time if not provided.
     * @return $this
     */
    public function setTs($ts)
    {
        
        $this->ts = $ts;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type Type.
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
