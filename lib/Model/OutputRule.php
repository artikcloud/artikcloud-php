<?php
/**
 * OutputRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Model;

use \ArrayAccess;
/**
 * OutputRule Class Doc Comment
 *
 * @category    Class
 * @description Rule information.
 * @package     ArtikCloud
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OutputRule implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'aid' => 'string',
        'created_on' => 'int',
        'description' => 'string',
        'enabled' => 'bool',
        'error' => '\ArtikCloud\Model\RuleError',
        'id' => 'string',
        'index' => 'int',
        'invalidated_on' => 'int',
        'language_version' => 'int',
        'modified_on' => 'int',
        'name' => 'string',
        'rule' => 'map[string,object]',
        'uid' => 'string',
        'warning' => '\ArtikCloud\Model\RuleWarningOutput'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'aid' => 'aid',
        'created_on' => 'createdOn',
        'description' => 'description',
        'enabled' => 'enabled',
        'error' => 'error',
        'id' => 'id',
        'index' => 'index',
        'invalidated_on' => 'invalidatedOn',
        'language_version' => 'languageVersion',
        'modified_on' => 'modifiedOn',
        'name' => 'name',
        'rule' => 'rule',
        'uid' => 'uid',
        'warning' => 'warning'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'aid' => 'setAid',
        'created_on' => 'setCreatedOn',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'error' => 'setError',
        'id' => 'setId',
        'index' => 'setIndex',
        'invalidated_on' => 'setInvalidatedOn',
        'language_version' => 'setLanguageVersion',
        'modified_on' => 'setModifiedOn',
        'name' => 'setName',
        'rule' => 'setRule',
        'uid' => 'setUid',
        'warning' => 'setWarning'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'aid' => 'getAid',
        'created_on' => 'getCreatedOn',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'error' => 'getError',
        'id' => 'getId',
        'index' => 'getIndex',
        'invalidated_on' => 'getInvalidatedOn',
        'language_version' => 'getLanguageVersion',
        'modified_on' => 'getModifiedOn',
        'name' => 'getName',
        'rule' => 'getRule',
        'uid' => 'getUid',
        'warning' => 'getWarning'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $aid 
      * @var string
      */
    protected $aid;
    
    /**
      * $created_on 
      * @var int
      */
    protected $created_on;
    
    /**
      * $description 
      * @var string
      */
    protected $description;
    
    /**
      * $enabled 
      * @var bool
      */
    protected $enabled;
    
    /**
      * $error 
      * @var \ArtikCloud\Model\RuleError
      */
    protected $error;
    
    /**
      * $id 
      * @var string
      */
    protected $id;
    
    /**
      * $index 
      * @var int
      */
    protected $index;
    
    /**
      * $invalidated_on 
      * @var int
      */
    protected $invalidated_on;
    
    /**
      * $language_version 
      * @var int
      */
    protected $language_version;
    
    /**
      * $modified_on 
      * @var int
      */
    protected $modified_on;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $rule 
      * @var map[string,object]
      */
    protected $rule;
    
    /**
      * $uid 
      * @var string
      */
    protected $uid;
    
    /**
      * $warning 
      * @var \ArtikCloud\Model\RuleWarningOutput
      */
    protected $warning;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->aid = $data["aid"];
            $this->created_on = $data["created_on"];
            $this->description = $data["description"];
            $this->enabled = $data["enabled"];
            $this->error = $data["error"];
            $this->id = $data["id"];
            $this->index = $data["index"];
            $this->invalidated_on = $data["invalidated_on"];
            $this->language_version = $data["language_version"];
            $this->modified_on = $data["modified_on"];
            $this->name = $data["name"];
            $this->rule = $data["rule"];
            $this->uid = $data["uid"];
            $this->warning = $data["warning"];
        }
    }
    
    /**
     * Gets aid
     * @return string
     */
    public function getAid()
    {
        return $this->aid;
    }
  
    /**
     * Sets aid
     * @param string $aid 
     * @return $this
     */
    public function setAid($aid)
    {
        
        $this->aid = $aid;
        return $this;
    }
    
    /**
     * Gets created_on
     * @return int
     */
    public function getCreatedOn()
    {
        return $this->created_on;
    }
  
    /**
     * Sets created_on
     * @param int $created_on 
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        
        $this->created_on = $created_on;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description 
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }
  
    /**
     * Sets enabled
     * @param bool $enabled 
     * @return $this
     */
    public function setEnabled($enabled)
    {
        
        $this->enabled = $enabled;
        return $this;
    }
    
    /**
     * Gets error
     * @return \ArtikCloud\Model\RuleError
     */
    public function getError()
    {
        return $this->error;
    }
  
    /**
     * Sets error
     * @param \ArtikCloud\Model\RuleError $error 
     * @return $this
     */
    public function setError($error)
    {
        
        $this->error = $error;
        return $this;
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets index
     * @return int
     */
    public function getIndex()
    {
        return $this->index;
    }
  
    /**
     * Sets index
     * @param int $index 
     * @return $this
     */
    public function setIndex($index)
    {
        
        $this->index = $index;
        return $this;
    }
    
    /**
     * Gets invalidated_on
     * @return int
     */
    public function getInvalidatedOn()
    {
        return $this->invalidated_on;
    }
  
    /**
     * Sets invalidated_on
     * @param int $invalidated_on 
     * @return $this
     */
    public function setInvalidatedOn($invalidated_on)
    {
        
        $this->invalidated_on = $invalidated_on;
        return $this;
    }
    
    /**
     * Gets language_version
     * @return int
     */
    public function getLanguageVersion()
    {
        return $this->language_version;
    }
  
    /**
     * Sets language_version
     * @param int $language_version 
     * @return $this
     */
    public function setLanguageVersion($language_version)
    {
        
        $this->language_version = $language_version;
        return $this;
    }
    
    /**
     * Gets modified_on
     * @return int
     */
    public function getModifiedOn()
    {
        return $this->modified_on;
    }
  
    /**
     * Sets modified_on
     * @param int $modified_on 
     * @return $this
     */
    public function setModifiedOn($modified_on)
    {
        
        $this->modified_on = $modified_on;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets rule
     * @return map[string,object]
     */
    public function getRule()
    {
        return $this->rule;
    }
  
    /**
     * Sets rule
     * @param map[string,object] $rule 
     * @return $this
     */
    public function setRule($rule)
    {
        
        $this->rule = $rule;
        return $this;
    }
    
    /**
     * Gets uid
     * @return string
     */
    public function getUid()
    {
        return $this->uid;
    }
  
    /**
     * Sets uid
     * @param string $uid 
     * @return $this
     */
    public function setUid($uid)
    {
        
        $this->uid = $uid;
        return $this;
    }
    
    /**
     * Gets warning
     * @return \ArtikCloud\Model\RuleWarningOutput
     */
    public function getWarning()
    {
        return $this->warning;
    }
  
    /**
     * Sets warning
     * @param \ArtikCloud\Model\RuleWarningOutput $warning 
     * @return $this
     */
    public function setWarning($warning)
    {
        
        $this->warning = $warning;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
