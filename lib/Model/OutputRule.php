<?php
/**
 * OutputRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\ArtikCloud\Model;

use \ArrayAccess;

/**
 * OutputRule Class Doc Comment
 *
 * @category    Class
 * @description Rule information.
 * @package     ArtikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OutputRule implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OutputRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aid' => 'string',
        'created_on' => 'int',
        'description' => 'string',
        'enabled' => 'bool',
        'error' => '\ArtikCloud\ArtikCloud\Model\RuleError',
        'id' => 'string',
        'index' => 'int',
        'invalidated_on' => 'int',
        'language_version' => 'int',
        'modified_on' => 'int',
        'name' => 'string',
        'rule' => 'map[string,object]',
        'uid' => 'string',
        'warning' => '\ArtikCloud\ArtikCloud\Model\RuleWarningOutput',
        'owner' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'aid' => 'aid',
        'created_on' => 'createdOn',
        'description' => 'description',
        'enabled' => 'enabled',
        'error' => 'error',
        'id' => 'id',
        'index' => 'index',
        'invalidated_on' => 'invalidatedOn',
        'language_version' => 'languageVersion',
        'modified_on' => 'modifiedOn',
        'name' => 'name',
        'rule' => 'rule',
        'uid' => 'uid',
        'warning' => 'warning',
        'owner' => 'owner'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'aid' => 'setAid',
        'created_on' => 'setCreatedOn',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'error' => 'setError',
        'id' => 'setId',
        'index' => 'setIndex',
        'invalidated_on' => 'setInvalidatedOn',
        'language_version' => 'setLanguageVersion',
        'modified_on' => 'setModifiedOn',
        'name' => 'setName',
        'rule' => 'setRule',
        'uid' => 'setUid',
        'warning' => 'setWarning',
        'owner' => 'setOwner'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'aid' => 'getAid',
        'created_on' => 'getCreatedOn',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'error' => 'getError',
        'id' => 'getId',
        'index' => 'getIndex',
        'invalidated_on' => 'getInvalidatedOn',
        'language_version' => 'getLanguageVersion',
        'modified_on' => 'getModifiedOn',
        'name' => 'getName',
        'rule' => 'getRule',
        'uid' => 'getUid',
        'warning' => 'getWarning',
        'owner' => 'getOwner'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OWNER_USER = 'user';
    const OWNER_APPLICATION = 'application';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOwnerAllowableValues()
    {
        return [
            self::OWNER_USER,
            self::OWNER_APPLICATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aid'] = isset($data['aid']) ? $data['aid'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['invalidated_on'] = isset($data['invalidated_on']) ? $data['invalidated_on'] : null;
        $this->container['language_version'] = isset($data['language_version']) ? $data['language_version'] : null;
        $this->container['modified_on'] = isset($data['modified_on']) ? $data['modified_on'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rule'] = isset($data['rule']) ? $data['rule'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['warning'] = isset($data['warning']) ? $data['warning'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["user", "application"];
        if (!in_array($this->container['owner'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'owner', must be one of 'user', 'application'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["user", "application"];
        if (!in_array($this->container['owner'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets aid
     * @return string
     */
    public function getAid()
    {
        return $this->container['aid'];
    }

    /**
     * Sets aid
     * @param string $aid
     * @return $this
     */
    public function setAid($aid)
    {
        $this->container['aid'] = $aid;

        return $this;
    }

    /**
     * Gets created_on
     * @return int
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param int $created_on
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param bool $enabled
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets error
     * @return \ArtikCloud\ArtikCloud\Model\RuleError
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     * @param \ArtikCloud\ArtikCloud\Model\RuleError $error
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets index
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     * @param int $index
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets invalidated_on
     * @return int
     */
    public function getInvalidatedOn()
    {
        return $this->container['invalidated_on'];
    }

    /**
     * Sets invalidated_on
     * @param int $invalidated_on
     * @return $this
     */
    public function setInvalidatedOn($invalidated_on)
    {
        $this->container['invalidated_on'] = $invalidated_on;

        return $this;
    }

    /**
     * Gets language_version
     * @return int
     */
    public function getLanguageVersion()
    {
        return $this->container['language_version'];
    }

    /**
     * Sets language_version
     * @param int $language_version
     * @return $this
     */
    public function setLanguageVersion($language_version)
    {
        $this->container['language_version'] = $language_version;

        return $this;
    }

    /**
     * Gets modified_on
     * @return int
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     * @param int $modified_on
     * @return $this
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rule
     * @return map[string,object]
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     * @param map[string,object] $rule
     * @return $this
     */
    public function setRule($rule)
    {
        $this->container['rule'] = $rule;

        return $this;
    }

    /**
     * Gets uid
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     * @param string $uid
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets warning
     * @return \ArtikCloud\ArtikCloud\Model\RuleWarningOutput
     */
    public function getWarning()
    {
        return $this->container['warning'];
    }

    /**
     * Sets warning
     * @param \ArtikCloud\ArtikCloud\Model\RuleWarningOutput $warning
     * @return $this
     */
    public function setWarning($warning)
    {
        $this->container['warning'] = $warning;

        return $this;
    }

    /**
     * Gets owner
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param string $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $allowed_values = array('user', 'application');
        if (!is_null($owner) && (!in_array($owner, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'owner', must be one of 'user', 'application'");
        }
        $this->container['owner'] = $owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


