<?php
/**
 * AggregateData
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Model;

use \ArrayAccess;
/**
 * AggregateData Class Doc Comment
 *
 * @category    Class
 * @description Aggregate Data
 * @package     ArtikCloud
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AggregateData implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'count' => 'int',
        'max' => 'float',
        'mean' => 'float',
        'min' => 'float',
        'sum' => 'float',
        'variance' => 'float'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'count' => 'count',
        'max' => 'max',
        'mean' => 'mean',
        'min' => 'min',
        'sum' => 'sum',
        'variance' => 'variance'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'count' => 'setCount',
        'max' => 'setMax',
        'mean' => 'setMean',
        'min' => 'setMin',
        'sum' => 'setSum',
        'variance' => 'setVariance'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'count' => 'getCount',
        'max' => 'getMax',
        'mean' => 'getMean',
        'min' => 'getMin',
        'sum' => 'getSum',
        'variance' => 'getVariance'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $count 
      * @var int
      */
    protected $count;
    
    /**
      * $max 
      * @var float
      */
    protected $max;
    
    /**
      * $mean 
      * @var float
      */
    protected $mean;
    
    /**
      * $min 
      * @var float
      */
    protected $min;
    
    /**
      * $sum 
      * @var float
      */
    protected $sum;
    
    /**
      * $variance 
      * @var float
      */
    protected $variance;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->count = $data["count"];
            $this->max = $data["max"];
            $this->mean = $data["mean"];
            $this->min = $data["min"];
            $this->sum = $data["sum"];
            $this->variance = $data["variance"];
        }
    }
    
    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->count;
    }
  
    /**
     * Sets count
     * @param int $count 
     * @return $this
     */
    public function setCount($count)
    {
        
        $this->count = $count;
        return $this;
    }
    
    /**
     * Gets max
     * @return float
     */
    public function getMax()
    {
        return $this->max;
    }
  
    /**
     * Sets max
     * @param float $max 
     * @return $this
     */
    public function setMax($max)
    {
        
        $this->max = $max;
        return $this;
    }
    
    /**
     * Gets mean
     * @return float
     */
    public function getMean()
    {
        return $this->mean;
    }
  
    /**
     * Sets mean
     * @param float $mean 
     * @return $this
     */
    public function setMean($mean)
    {
        
        $this->mean = $mean;
        return $this;
    }
    
    /**
     * Gets min
     * @return float
     */
    public function getMin()
    {
        return $this->min;
    }
  
    /**
     * Sets min
     * @param float $min 
     * @return $this
     */
    public function setMin($min)
    {
        
        $this->min = $min;
        return $this;
    }
    
    /**
     * Gets sum
     * @return float
     */
    public function getSum()
    {
        return $this->sum;
    }
  
    /**
     * Sets sum
     * @param float $sum 
     * @return $this
     */
    public function setSum($sum)
    {
        
        $this->sum = $sum;
        return $this;
    }
    
    /**
     * Gets variance
     * @return float
     */
    public function getVariance()
    {
        return $this->variance;
    }
  
    /**
     * Sets variance
     * @param float $variance 
     * @return $this
     */
    public function setVariance($variance)
    {
        
        $this->variance = $variance;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
