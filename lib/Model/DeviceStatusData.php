<?php
/**
 * DeviceStatusData
 *
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\ArtikCloud\Model;

use \ArrayAccess;

/**
 * DeviceStatusData Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     ArtikCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DeviceStatusData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DeviceStatusData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_time_online' => 'int',
        'last_action_ts' => 'int',
        'last_message_ts' => 'int',
        'availability' => 'string',
        'snapshot' => 'map[string,object]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'last_time_online' => 'lastTimeOnline',
        'last_action_ts' => 'lastActionTs',
        'last_message_ts' => 'lastMessageTs',
        'availability' => 'availability',
        'snapshot' => 'snapshot'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'last_time_online' => 'setLastTimeOnline',
        'last_action_ts' => 'setLastActionTs',
        'last_message_ts' => 'setLastMessageTs',
        'availability' => 'setAvailability',
        'snapshot' => 'setSnapshot'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'last_time_online' => 'getLastTimeOnline',
        'last_action_ts' => 'getLastActionTs',
        'last_message_ts' => 'getLastMessageTs',
        'availability' => 'getAvailability',
        'snapshot' => 'getSnapshot'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_time_online'] = isset($data['last_time_online']) ? $data['last_time_online'] : null;
        $this->container['last_action_ts'] = isset($data['last_action_ts']) ? $data['last_action_ts'] : null;
        $this->container['last_message_ts'] = isset($data['last_message_ts']) ? $data['last_message_ts'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['snapshot'] = isset($data['snapshot']) ? $data['snapshot'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets last_time_online
     * @return int
     */
    public function getLastTimeOnline()
    {
        return $this->container['last_time_online'];
    }

    /**
     * Sets last_time_online
     * @param int $last_time_online
     * @return $this
     */
    public function setLastTimeOnline($last_time_online)
    {
        $this->container['last_time_online'] = $last_time_online;

        return $this;
    }

    /**
     * Gets last_action_ts
     * @return int
     */
    public function getLastActionTs()
    {
        return $this->container['last_action_ts'];
    }

    /**
     * Sets last_action_ts
     * @param int $last_action_ts
     * @return $this
     */
    public function setLastActionTs($last_action_ts)
    {
        $this->container['last_action_ts'] = $last_action_ts;

        return $this;
    }

    /**
     * Gets last_message_ts
     * @return int
     */
    public function getLastMessageTs()
    {
        return $this->container['last_message_ts'];
    }

    /**
     * Sets last_message_ts
     * @param int $last_message_ts
     * @return $this
     */
    public function setLastMessageTs($last_message_ts)
    {
        $this->container['last_message_ts'] = $last_message_ts;

        return $this;
    }

    /**
     * Gets availability
     * @return string
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     * @param string $availability
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets snapshot
     * @return map[string,object]
     */
    public function getSnapshot()
    {
        return $this->container['snapshot'];
    }

    /**
     * Sets snapshot
     * @param map[string,object] $snapshot
     * @return $this
     */
    public function setSnapshot($snapshot)
    {
        $this->container['snapshot'] = $snapshot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ArtikCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


