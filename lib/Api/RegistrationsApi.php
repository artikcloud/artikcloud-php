<?php
/**
 * RegistrationsApi
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Api;

use \ArtikCloud\Configuration;
use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\ObjectSerializer;

/**
 * RegistrationsApi Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegistrationsApi
{

    /**
     * API Client
     *
     * @var \ArtikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ArtikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ArtikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.artik.cloud/v1.1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ArtikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ArtikCloud\ApiClient $apiClient set the API client
     *
     * @return RegistrationsApi
     */
    public function setApiClient(\ArtikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation confirmUser
     *
     * Confirm User
     *
     * @param \ArtikCloud\Model\DeviceRegConfirmUserRequest $registration_info Device Registration information. (required)
     * @return \ArtikCloud\Model\DeviceRegConfirmUserResponseEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function confirmUser($registration_info)
    {
        list($response) = $this->confirmUserWithHttpInfo($registration_info);
        return $response;
    }

    /**
     * Operation confirmUserWithHttpInfo
     *
     * Confirm User
     *
     * @param \ArtikCloud\Model\DeviceRegConfirmUserRequest $registration_info Device Registration information. (required)
     * @return Array of \ArtikCloud\Model\DeviceRegConfirmUserResponseEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function confirmUserWithHttpInfo($registration_info)
    {
        // verify the required parameter 'registration_info' is set
        if ($registration_info === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_info when calling confirmUser');
        }
        // parse inputs
        $resourcePath = "/devices/registrations/pin";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($registration_info)) {
            $_tempBody = $registration_info;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DeviceRegConfirmUserResponseEnvelope',
                '/devices/registrations/pin'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DeviceRegConfirmUserResponseEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DeviceRegConfirmUserResponseEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRequestStatusForUser
     *
     * Get Request Status For User
     *
     * @param string $request_id Request ID. (required)
     * @return \ArtikCloud\Model\DeviceRegStatusResponseEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getRequestStatusForUser($request_id)
    {
        list($response) = $this->getRequestStatusForUserWithHttpInfo($request_id);
        return $response;
    }

    /**
     * Operation getRequestStatusForUserWithHttpInfo
     *
     * Get Request Status For User
     *
     * @param string $request_id Request ID. (required)
     * @return Array of \ArtikCloud\Model\DeviceRegStatusResponseEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getRequestStatusForUserWithHttpInfo($request_id)
    {
        // verify the required parameter 'request_id' is set
        if ($request_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_id when calling getRequestStatusForUser');
        }
        // parse inputs
        $resourcePath = "/devices/registrations/{requestId}/status";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($request_id !== null) {
            $resourcePath = str_replace(
                "{" . "requestId" . "}",
                $this->apiClient->getSerializer()->toPathValue($request_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DeviceRegStatusResponseEnvelope',
                '/devices/registrations/{requestId}/status'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DeviceRegStatusResponseEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DeviceRegStatusResponseEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation unregisterDevice
     *
     * Unregister Device
     *
     * @param string $device_id Device ID. (required)
     * @return \ArtikCloud\Model\UnregisterDeviceResponseEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function unregisterDevice($device_id)
    {
        list($response) = $this->unregisterDeviceWithHttpInfo($device_id);
        return $response;
    }

    /**
     * Operation unregisterDeviceWithHttpInfo
     *
     * Unregister Device
     *
     * @param string $device_id Device ID. (required)
     * @return Array of \ArtikCloud\Model\UnregisterDeviceResponseEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function unregisterDeviceWithHttpInfo($device_id)
    {
        // verify the required parameter 'device_id' is set
        if ($device_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_id when calling unregisterDevice');
        }
        // parse inputs
        $resourcePath = "/devices/{deviceId}/registrations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                "{" . "deviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($device_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\UnregisterDeviceResponseEnvelope',
                '/devices/{deviceId}/registrations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\UnregisterDeviceResponseEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\UnregisterDeviceResponseEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
