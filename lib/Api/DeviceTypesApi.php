<?php
/**
 * DeviceTypesApi
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Api;

use \ArtikCloud\Configuration;
use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\ObjectSerializer;

/**
 * DeviceTypesApi Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceTypesApi
{

    /**
     * API Client
     *
     * @var \ArtikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ArtikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ArtikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.artik.cloud/v1.1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ArtikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ArtikCloud\ApiClient $apiClient set the API client
     *
     * @return DeviceTypesApi
     */
    public function setApiClient(\ArtikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAvailableManifestVersions
     *
     * Get Available Manifest Versions
     *
     * @param string $device_type_id deviceTypeId (required)
     * @return \ArtikCloud\Model\ManifestVersionsEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getAvailableManifestVersions($device_type_id)
    {
        list($response) = $this->getAvailableManifestVersionsWithHttpInfo($device_type_id);
        return $response;
    }

    /**
     * Operation getAvailableManifestVersionsWithHttpInfo
     *
     * Get Available Manifest Versions
     *
     * @param string $device_type_id deviceTypeId (required)
     * @return Array of \ArtikCloud\Model\ManifestVersionsEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getAvailableManifestVersionsWithHttpInfo($device_type_id)
    {
        // verify the required parameter 'device_type_id' is set
        if ($device_type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_type_id when calling getAvailableManifestVersions');
        }
        // parse inputs
        $resourcePath = "/devicetypes/{deviceTypeId}/availablemanifestversions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($device_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "deviceTypeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($device_type_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\ManifestVersionsEnvelope',
                '/devicetypes/{deviceTypeId}/availablemanifestversions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\ManifestVersionsEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\ManifestVersionsEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDeviceType
     *
     * Get Device Type
     *
     * @param string $device_type_id deviceTypeId (required)
     * @return \ArtikCloud\Model\DeviceTypeEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getDeviceType($device_type_id)
    {
        list($response) = $this->getDeviceTypeWithHttpInfo($device_type_id);
        return $response;
    }

    /**
     * Operation getDeviceTypeWithHttpInfo
     *
     * Get Device Type
     *
     * @param string $device_type_id deviceTypeId (required)
     * @return Array of \ArtikCloud\Model\DeviceTypeEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getDeviceTypeWithHttpInfo($device_type_id)
    {
        // verify the required parameter 'device_type_id' is set
        if ($device_type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_type_id when calling getDeviceType');
        }
        // parse inputs
        $resourcePath = "/devicetypes/{deviceTypeId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($device_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "deviceTypeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($device_type_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DeviceTypeEnvelope',
                '/devicetypes/{deviceTypeId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DeviceTypeEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DeviceTypeEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDeviceTypes
     *
     * Get Device Types
     *
     * @param string $name Device Type name (required)
     * @param int $offset Offset for pagination. (optional)
     * @param int $count Desired count of items in the result set (optional)
     * @param string $tags Elements tagged with the list of tags. (comma separated) (optional)
     * @return \ArtikCloud\Model\DeviceTypesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getDeviceTypes($name, $offset = null, $count = null, $tags = null)
    {
        list($response) = $this->getDeviceTypesWithHttpInfo($name, $offset, $count, $tags);
        return $response;
    }

    /**
     * Operation getDeviceTypesWithHttpInfo
     *
     * Get Device Types
     *
     * @param string $name Device Type name (required)
     * @param int $offset Offset for pagination. (optional)
     * @param int $count Desired count of items in the result set (optional)
     * @param string $tags Elements tagged with the list of tags. (comma separated) (optional)
     * @return Array of \ArtikCloud\Model\DeviceTypesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getDeviceTypesWithHttpInfo($name, $offset = null, $count = null, $tags = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDeviceTypes');
        }
        // parse inputs
        $resourcePath = "/devicetypes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = $this->apiClient->getSerializer()->toQueryValue($tags);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DeviceTypesEnvelope',
                '/devicetypes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DeviceTypesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DeviceTypesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLatestManifestProperties
     *
     * Get Latest Manifest Properties
     *
     * @param string $device_type_id Device Type ID. (required)
     * @return \ArtikCloud\Model\ManifestPropertiesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getLatestManifestProperties($device_type_id)
    {
        list($response) = $this->getLatestManifestPropertiesWithHttpInfo($device_type_id);
        return $response;
    }

    /**
     * Operation getLatestManifestPropertiesWithHttpInfo
     *
     * Get Latest Manifest Properties
     *
     * @param string $device_type_id Device Type ID. (required)
     * @return Array of \ArtikCloud\Model\ManifestPropertiesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getLatestManifestPropertiesWithHttpInfo($device_type_id)
    {
        // verify the required parameter 'device_type_id' is set
        if ($device_type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_type_id when calling getLatestManifestProperties');
        }
        // parse inputs
        $resourcePath = "/devicetypes/{deviceTypeId}/manifests/latest/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($device_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "deviceTypeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($device_type_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\ManifestPropertiesEnvelope',
                '/devicetypes/{deviceTypeId}/manifests/latest/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\ManifestPropertiesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\ManifestPropertiesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getManifestProperties
     *
     * Get manifest properties
     *
     * @param string $device_type_id Device Type ID. (required)
     * @param string $version Manifest Version. (required)
     * @return \ArtikCloud\Model\ManifestPropertiesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getManifestProperties($device_type_id, $version)
    {
        list($response) = $this->getManifestPropertiesWithHttpInfo($device_type_id, $version);
        return $response;
    }

    /**
     * Operation getManifestPropertiesWithHttpInfo
     *
     * Get manifest properties
     *
     * @param string $device_type_id Device Type ID. (required)
     * @param string $version Manifest Version. (required)
     * @return Array of \ArtikCloud\Model\ManifestPropertiesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getManifestPropertiesWithHttpInfo($device_type_id, $version)
    {
        // verify the required parameter 'device_type_id' is set
        if ($device_type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_type_id when calling getManifestProperties');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling getManifestProperties');
        }
        // parse inputs
        $resourcePath = "/devicetypes/{deviceTypeId}/manifests/{version}/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($device_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "deviceTypeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($device_type_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\ManifestPropertiesEnvelope',
                '/devicetypes/{deviceTypeId}/manifests/{version}/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\ManifestPropertiesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\ManifestPropertiesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
