<?php
/**
 * DevicesManagementApi
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Api;

use \ArtikCloud\Configuration;
use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\ObjectSerializer;

/**
 * DevicesManagementApi Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DevicesManagementApi
{

    /**
     * API Client
     *
     * @var \ArtikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ArtikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ArtikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.artik.cloud/v1.1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ArtikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ArtikCloud\ApiClient $apiClient set the API client
     *
     * @return DevicesManagementApi
     */
    public function setApiClient(\ArtikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createTasks
     *
     * Create a new task for one or more devices
     *
     * @param \ArtikCloud\Model\TaskRequest $task_payload Task object to be created (required)
     * @return \ArtikCloud\Model\TaskEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function createTasks($task_payload)
    {
        list($response) = $this->createTasksWithHttpInfo($task_payload);
        return $response;
    }

    /**
     * Operation createTasksWithHttpInfo
     *
     * Create a new task for one or more devices
     *
     * @param \ArtikCloud\Model\TaskRequest $task_payload Task object to be created (required)
     * @return Array of \ArtikCloud\Model\TaskEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function createTasksWithHttpInfo($task_payload)
    {
        // verify the required parameter 'task_payload' is set
        if ($task_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_payload when calling createTasks');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/tasks";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($task_payload)) {
            $_tempBody = $task_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\TaskEnvelope',
                '/devicemgmt/tasks'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\TaskEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\TaskEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteServerProperties
     *
     * Deletes a device's properties.
     *
     * @param string $did Device ID. (required)
     * @return \ArtikCloud\Model\MetadataEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function deleteServerProperties($did)
    {
        list($response) = $this->deleteServerPropertiesWithHttpInfo($did);
        return $response;
    }

    /**
     * Operation deleteServerPropertiesWithHttpInfo
     *
     * Deletes a device's properties.
     *
     * @param string $did Device ID. (required)
     * @return Array of \ArtikCloud\Model\MetadataEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function deleteServerPropertiesWithHttpInfo($did)
    {
        // verify the required parameter 'did' is set
        if ($did === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did when calling deleteServerProperties');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/devices/{did}/serverproperties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                "{" . "did" . "}",
                $this->apiClient->getSerializer()->toPathValue($did),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\MetadataEnvelope',
                '/devicemgmt/devices/{did}/serverproperties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\MetadataEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\MetadataEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllByDid
     *
     * Returns the list of tasks for a particular device id with optional status filter.
     *
     * @param string $did Device ID. (required)
     * @param int $count Max results count. (optional)
     * @param int $offset Result starting offset. (optional)
     * @param string $status Status filter. Comma-separated statuses. (optional)
     * @param string $order Sort results by a field. Valid fields: createdOn. (optional)
     * @param string $sort Sort order. Valid values: asc or desc. (optional)
     * @return \ArtikCloud\Model\TaskByDidListEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getAllByDid($did, $count = null, $offset = null, $status = null, $order = null, $sort = null)
    {
        list($response) = $this->getAllByDidWithHttpInfo($did, $count, $offset, $status, $order, $sort);
        return $response;
    }

    /**
     * Operation getAllByDidWithHttpInfo
     *
     * Returns the list of tasks for a particular device id with optional status filter.
     *
     * @param string $did Device ID. (required)
     * @param int $count Max results count. (optional)
     * @param int $offset Result starting offset. (optional)
     * @param string $status Status filter. Comma-separated statuses. (optional)
     * @param string $order Sort results by a field. Valid fields: createdOn. (optional)
     * @param string $sort Sort order. Valid values: asc or desc. (optional)
     * @return Array of \ArtikCloud\Model\TaskByDidListEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getAllByDidWithHttpInfo($did, $count = null, $offset = null, $status = null, $order = null, $sort = null)
    {
        // verify the required parameter 'did' is set
        if ($did === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did when calling getAllByDid');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/devices/{did}/tasks";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                "{" . "did" . "}",
                $this->apiClient->getSerializer()->toPathValue($did),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\TaskByDidListEnvelope',
                '/devicemgmt/devices/{did}/tasks'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\TaskByDidListEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\TaskByDidListEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDeviceTypesInfo
     *
     * Read a device type device management information.
     *
     * @param string $dtid Device type ID. (required)
     * @return \ArtikCloud\Model\DeviceTypesInfoEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getDeviceTypesInfo($dtid)
    {
        list($response) = $this->getDeviceTypesInfoWithHttpInfo($dtid);
        return $response;
    }

    /**
     * Operation getDeviceTypesInfoWithHttpInfo
     *
     * Read a device type device management information.
     *
     * @param string $dtid Device type ID. (required)
     * @return Array of \ArtikCloud\Model\DeviceTypesInfoEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getDeviceTypesInfoWithHttpInfo($dtid)
    {
        // verify the required parameter 'dtid' is set
        if ($dtid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dtid when calling getDeviceTypesInfo');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/devicetypes/{dtid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($dtid !== null) {
            $resourcePath = str_replace(
                "{" . "dtid" . "}",
                $this->apiClient->getSerializer()->toPathValue($dtid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DeviceTypesInfoEnvelope',
                '/devicemgmt/devicetypes/{dtid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DeviceTypesInfoEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DeviceTypesInfoEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getManifestProperties
     *
     * Get a device type's device management manifest properties
     *
     * @param string $dtid Device Type ID. (required)
     * @return \ArtikCloud\Model\MetadataPropertiesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getManifestProperties($dtid)
    {
        list($response) = $this->getManifestPropertiesWithHttpInfo($dtid);
        return $response;
    }

    /**
     * Operation getManifestPropertiesWithHttpInfo
     *
     * Get a device type's device management manifest properties
     *
     * @param string $dtid Device Type ID. (required)
     * @return Array of \ArtikCloud\Model\MetadataPropertiesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getManifestPropertiesWithHttpInfo($dtid)
    {
        // verify the required parameter 'dtid' is set
        if ($dtid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dtid when calling getManifestProperties');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/devicetypes/{dtid}/manifest/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($dtid !== null) {
            $resourcePath = str_replace(
                "{" . "dtid" . "}",
                $this->apiClient->getSerializer()->toPathValue($dtid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\MetadataPropertiesEnvelope',
                '/devicemgmt/devicetypes/{dtid}/manifest/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\MetadataPropertiesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\MetadataPropertiesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProperties
     *
     * Read a device's properties.
     *
     * @param string $did Device ID. (required)
     * @param bool $include_timestamp Include timestamp. (optional)
     * @return \ArtikCloud\Model\MetadataEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getProperties($did, $include_timestamp = null)
    {
        list($response) = $this->getPropertiesWithHttpInfo($did, $include_timestamp);
        return $response;
    }

    /**
     * Operation getPropertiesWithHttpInfo
     *
     * Read a device's properties.
     *
     * @param string $did Device ID. (required)
     * @param bool $include_timestamp Include timestamp. (optional)
     * @return Array of \ArtikCloud\Model\MetadataEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getPropertiesWithHttpInfo($did, $include_timestamp = null)
    {
        // verify the required parameter 'did' is set
        if ($did === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did when calling getProperties');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/devices/{did}/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($include_timestamp !== null) {
            $queryParams['includeTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($include_timestamp);
        }
        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                "{" . "did" . "}",
                $this->apiClient->getSerializer()->toPathValue($did),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\MetadataEnvelope',
                '/devicemgmt/devices/{did}/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\MetadataEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\MetadataEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStatuses
     *
     * Returns the details and status of a task id and the individual statuses of each device id in the list.
     *
     * @param string $tid Task ID. (required)
     * @param int $count Max results count. (optional)
     * @param int $offset Result starting offset. (optional)
     * @param string $status Status filter. Comma-separated statuses. (optional)
     * @param string $dids Devices filter. Comma-separated device IDs. (optional)
     * @return \ArtikCloud\Model\TaskStatusesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getStatuses($tid, $count = null, $offset = null, $status = null, $dids = null)
    {
        list($response) = $this->getStatusesWithHttpInfo($tid, $count, $offset, $status, $dids);
        return $response;
    }

    /**
     * Operation getStatusesWithHttpInfo
     *
     * Returns the details and status of a task id and the individual statuses of each device id in the list.
     *
     * @param string $tid Task ID. (required)
     * @param int $count Max results count. (optional)
     * @param int $offset Result starting offset. (optional)
     * @param string $status Status filter. Comma-separated statuses. (optional)
     * @param string $dids Devices filter. Comma-separated device IDs. (optional)
     * @return Array of \ArtikCloud\Model\TaskStatusesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getStatusesWithHttpInfo($tid, $count = null, $offset = null, $status = null, $dids = null)
    {
        // verify the required parameter 'tid' is set
        if ($tid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tid when calling getStatuses');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/tasks/{tid}/statuses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($dids !== null) {
            $queryParams['dids'] = $this->apiClient->getSerializer()->toQueryValue($dids);
        }
        // path params
        if ($tid !== null) {
            $resourcePath = str_replace(
                "{" . "tid" . "}",
                $this->apiClient->getSerializer()->toPathValue($tid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\TaskStatusesEnvelope',
                '/devicemgmt/tasks/{tid}/statuses'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\TaskStatusesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\TaskStatusesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStatusesHistory
     *
     * Returns the history of the status changes for a specific task id, or for a specific device id in that task.
     *
     * @param string $tid Task ID. (required)
     * @param string $did Device ID. Optional. (optional)
     * @return \ArtikCloud\Model\TaskStatusesHistoryEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getStatusesHistory($tid, $did = null)
    {
        list($response) = $this->getStatusesHistoryWithHttpInfo($tid, $did);
        return $response;
    }

    /**
     * Operation getStatusesHistoryWithHttpInfo
     *
     * Returns the history of the status changes for a specific task id, or for a specific device id in that task.
     *
     * @param string $tid Task ID. (required)
     * @param string $did Device ID. Optional. (optional)
     * @return Array of \ArtikCloud\Model\TaskStatusesHistoryEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getStatusesHistoryWithHttpInfo($tid, $did = null)
    {
        // verify the required parameter 'tid' is set
        if ($tid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tid when calling getStatusesHistory');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/tasks/{tid}/statuses/history";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($did !== null) {
            $queryParams['did'] = $this->apiClient->getSerializer()->toQueryValue($did);
        }
        // path params
        if ($tid !== null) {
            $resourcePath = str_replace(
                "{" . "tid" . "}",
                $this->apiClient->getSerializer()->toPathValue($tid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\TaskStatusesHistoryEnvelope',
                '/devicemgmt/tasks/{tid}/statuses/history'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\TaskStatusesHistoryEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\TaskStatusesHistoryEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTaskByID
     *
     * Returns the details and global status of a specific task id.
     *
     * @param string $tid Task ID. (required)
     * @return \ArtikCloud\Model\TaskEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getTaskByID($tid)
    {
        list($response) = $this->getTaskByIDWithHttpInfo($tid);
        return $response;
    }

    /**
     * Operation getTaskByIDWithHttpInfo
     *
     * Returns the details and global status of a specific task id.
     *
     * @param string $tid Task ID. (required)
     * @return Array of \ArtikCloud\Model\TaskEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getTaskByIDWithHttpInfo($tid)
    {
        // verify the required parameter 'tid' is set
        if ($tid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tid when calling getTaskByID');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/tasks/{tid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($tid !== null) {
            $resourcePath = str_replace(
                "{" . "tid" . "}",
                $this->apiClient->getSerializer()->toPathValue($tid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\TaskEnvelope',
                '/devicemgmt/tasks/{tid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\TaskEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\TaskEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTasks
     *
     * Returns the all the tasks for a device type.
     *
     * @param string $dtid Device Type ID. (required)
     * @param int $count Max results count. (optional)
     * @param int $offset Result starting offset. (optional)
     * @param string $status Status filter. Comma-separated statuses. (optional)
     * @param string $order Sort results by a field. Valid fields: createdOn. (optional)
     * @param string $sort Sort order. Valid values: asc or desc. (optional)
     * @return \ArtikCloud\Model\TaskListEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getTasks($dtid, $count = null, $offset = null, $status = null, $order = null, $sort = null)
    {
        list($response) = $this->getTasksWithHttpInfo($dtid, $count, $offset, $status, $order, $sort);
        return $response;
    }

    /**
     * Operation getTasksWithHttpInfo
     *
     * Returns the all the tasks for a device type.
     *
     * @param string $dtid Device Type ID. (required)
     * @param int $count Max results count. (optional)
     * @param int $offset Result starting offset. (optional)
     * @param string $status Status filter. Comma-separated statuses. (optional)
     * @param string $order Sort results by a field. Valid fields: createdOn. (optional)
     * @param string $sort Sort order. Valid values: asc or desc. (optional)
     * @return Array of \ArtikCloud\Model\TaskListEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getTasksWithHttpInfo($dtid, $count = null, $offset = null, $status = null, $order = null, $sort = null)
    {
        // verify the required parameter 'dtid' is set
        if ($dtid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dtid when calling getTasks');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/tasks";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($dtid !== null) {
            $queryParams['dtid'] = $this->apiClient->getSerializer()->toQueryValue($dtid);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\TaskListEnvelope',
                '/devicemgmt/tasks'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\TaskListEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\TaskListEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation queryProperties
     *
     * Query device properties across devices.
     *
     * @param string $dtid Device Type ID. (required)
     * @param int $count Max results count. (optional)
     * @param int $offset Result starting offset. (optional)
     * @param string $filter Query filter. Comma-separated key&#x3D;value pairs (optional)
     * @param bool $include_timestamp Include timestamp. (optional)
     * @return \ArtikCloud\Model\MetadataQueryEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function queryProperties($dtid, $count = null, $offset = null, $filter = null, $include_timestamp = null)
    {
        list($response) = $this->queryPropertiesWithHttpInfo($dtid, $count, $offset, $filter, $include_timestamp);
        return $response;
    }

    /**
     * Operation queryPropertiesWithHttpInfo
     *
     * Query device properties across devices.
     *
     * @param string $dtid Device Type ID. (required)
     * @param int $count Max results count. (optional)
     * @param int $offset Result starting offset. (optional)
     * @param string $filter Query filter. Comma-separated key&#x3D;value pairs (optional)
     * @param bool $include_timestamp Include timestamp. (optional)
     * @return Array of \ArtikCloud\Model\MetadataQueryEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function queryPropertiesWithHttpInfo($dtid, $count = null, $offset = null, $filter = null, $include_timestamp = null)
    {
        // verify the required parameter 'dtid' is set
        if ($dtid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dtid when calling queryProperties');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/devices/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($dtid !== null) {
            $queryParams['dtid'] = $this->apiClient->getSerializer()->toQueryValue($dtid);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($include_timestamp !== null) {
            $queryParams['includeTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($include_timestamp);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\MetadataQueryEnvelope',
                '/devicemgmt/devices/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\MetadataQueryEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\MetadataQueryEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateDeviceTypesInfo
     *
     * Updates a device type information
     *
     * @param string $dtid Device type ID. (required)
     * @param \ArtikCloud\Model\DeviceTypesInfo $device_type_info Device type info object to be set (required)
     * @return \ArtikCloud\Model\DeviceTypesInfoEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateDeviceTypesInfo($dtid, $device_type_info)
    {
        list($response) = $this->updateDeviceTypesInfoWithHttpInfo($dtid, $device_type_info);
        return $response;
    }

    /**
     * Operation updateDeviceTypesInfoWithHttpInfo
     *
     * Updates a device type information
     *
     * @param string $dtid Device type ID. (required)
     * @param \ArtikCloud\Model\DeviceTypesInfo $device_type_info Device type info object to be set (required)
     * @return Array of \ArtikCloud\Model\DeviceTypesInfoEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateDeviceTypesInfoWithHttpInfo($dtid, $device_type_info)
    {
        // verify the required parameter 'dtid' is set
        if ($dtid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dtid when calling updateDeviceTypesInfo');
        }
        // verify the required parameter 'device_type_info' is set
        if ($device_type_info === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_type_info when calling updateDeviceTypesInfo');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/devicetypes/{dtid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($dtid !== null) {
            $resourcePath = str_replace(
                "{" . "dtid" . "}",
                $this->apiClient->getSerializer()->toPathValue($dtid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($device_type_info)) {
            $_tempBody = $device_type_info;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DeviceTypesInfoEnvelope',
                '/devicemgmt/devicetypes/{dtid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DeviceTypesInfoEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DeviceTypesInfoEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateServerProperties
     *
     * Updates a device's server properties.
     *
     * @param string $did Device ID. (required)
     * @param object $device_properties Device properties object to be set (required)
     * @return \ArtikCloud\Model\MetadataEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateServerProperties($did, $device_properties)
    {
        list($response) = $this->updateServerPropertiesWithHttpInfo($did, $device_properties);
        return $response;
    }

    /**
     * Operation updateServerPropertiesWithHttpInfo
     *
     * Updates a device's server properties.
     *
     * @param string $did Device ID. (required)
     * @param object $device_properties Device properties object to be set (required)
     * @return Array of \ArtikCloud\Model\MetadataEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateServerPropertiesWithHttpInfo($did, $device_properties)
    {
        // verify the required parameter 'did' is set
        if ($did === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did when calling updateServerProperties');
        }
        // verify the required parameter 'device_properties' is set
        if ($device_properties === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_properties when calling updateServerProperties');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/devices/{did}/serverproperties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                "{" . "did" . "}",
                $this->apiClient->getSerializer()->toPathValue($did),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($device_properties)) {
            $_tempBody = $device_properties;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\MetadataEnvelope',
                '/devicemgmt/devices/{did}/serverproperties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\MetadataEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\MetadataEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTask
     *
     * Updates a task for all devices - For now just allows changing the state to cancelled.
     *
     * @param string $tid Task ID. (required)
     * @param \ArtikCloud\Model\TaskUpdateRequest $task_update_request Task update request (required)
     * @return \ArtikCloud\Model\TaskUpdateResponse
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateTask($tid, $task_update_request)
    {
        list($response) = $this->updateTaskWithHttpInfo($tid, $task_update_request);
        return $response;
    }

    /**
     * Operation updateTaskWithHttpInfo
     *
     * Updates a task for all devices - For now just allows changing the state to cancelled.
     *
     * @param string $tid Task ID. (required)
     * @param \ArtikCloud\Model\TaskUpdateRequest $task_update_request Task update request (required)
     * @return Array of \ArtikCloud\Model\TaskUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateTaskWithHttpInfo($tid, $task_update_request)
    {
        // verify the required parameter 'tid' is set
        if ($tid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tid when calling updateTask');
        }
        // verify the required parameter 'task_update_request' is set
        if ($task_update_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_update_request when calling updateTask');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/tasks/{tid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($tid !== null) {
            $resourcePath = str_replace(
                "{" . "tid" . "}",
                $this->apiClient->getSerializer()->toPathValue($tid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($task_update_request)) {
            $_tempBody = $task_update_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\TaskUpdateResponse',
                '/devicemgmt/tasks/{tid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\TaskUpdateResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\TaskUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTaskForDevice
     *
     * Updates a task for a specific device - For now just allows changing the state to cancelled.
     *
     * @param string $tid Task ID. (required)
     * @param string $did Device ID. (required)
     * @param \ArtikCloud\Model\DeviceTaskUpdateRequest $device_task_update_request Device task update request (required)
     * @return \ArtikCloud\Model\DeviceTaskUpdateResponse
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateTaskForDevice($tid, $did, $device_task_update_request)
    {
        list($response) = $this->updateTaskForDeviceWithHttpInfo($tid, $did, $device_task_update_request);
        return $response;
    }

    /**
     * Operation updateTaskForDeviceWithHttpInfo
     *
     * Updates a task for a specific device - For now just allows changing the state to cancelled.
     *
     * @param string $tid Task ID. (required)
     * @param string $did Device ID. (required)
     * @param \ArtikCloud\Model\DeviceTaskUpdateRequest $device_task_update_request Device task update request (required)
     * @return Array of \ArtikCloud\Model\DeviceTaskUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateTaskForDeviceWithHttpInfo($tid, $did, $device_task_update_request)
    {
        // verify the required parameter 'tid' is set
        if ($tid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tid when calling updateTaskForDevice');
        }
        // verify the required parameter 'did' is set
        if ($did === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did when calling updateTaskForDevice');
        }
        // verify the required parameter 'device_task_update_request' is set
        if ($device_task_update_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_task_update_request when calling updateTaskForDevice');
        }
        // parse inputs
        $resourcePath = "/devicemgmt/tasks/{tid}/devices/{did}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($tid !== null) {
            $resourcePath = str_replace(
                "{" . "tid" . "}",
                $this->apiClient->getSerializer()->toPathValue($tid),
                $resourcePath
            );
        }
        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                "{" . "did" . "}",
                $this->apiClient->getSerializer()->toPathValue($did),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($device_task_update_request)) {
            $_tempBody = $device_task_update_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DeviceTaskUpdateResponse',
                '/devicemgmt/tasks/{tid}/devices/{did}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DeviceTaskUpdateResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DeviceTaskUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
