<?php
/**
 * UsersApi
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\Api;

use \ArtikCloud\Configuration;
use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersApi
{

    /**
     * API Client
     *
     * @var \ArtikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ArtikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ArtikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.artik.cloud/v1.1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ArtikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ArtikCloud\ApiClient $apiClient set the API client
     *
     * @return UsersApi
     */
    public function setApiClient(\ArtikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createUserProperties
     *
     * Create User Application Properties
     *
     * @param string $user_id User Id (required)
     * @param \ArtikCloud\Model\AppProperties $properties Properties to be updated (required)
     * @param string $aid Application ID (optional)
     * @return \ArtikCloud\Model\PropertiesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function createUserProperties($user_id, $properties, $aid = null)
    {
        list($response) = $this->createUserPropertiesWithHttpInfo($user_id, $properties, $aid);
        return $response;
    }

    /**
     * Operation createUserPropertiesWithHttpInfo
     *
     * Create User Application Properties
     *
     * @param string $user_id User Id (required)
     * @param \ArtikCloud\Model\AppProperties $properties Properties to be updated (required)
     * @param string $aid Application ID (optional)
     * @return Array of \ArtikCloud\Model\PropertiesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function createUserPropertiesWithHttpInfo($user_id, $properties, $aid = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling createUserProperties');
        }
        // verify the required parameter 'properties' is set
        if ($properties === null) {
            throw new \InvalidArgumentException('Missing the required parameter $properties when calling createUserProperties');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($aid !== null) {
            $queryParams['aid'] = $this->apiClient->getSerializer()->toQueryValue($aid);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($properties)) {
            $_tempBody = $properties;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\PropertiesEnvelope',
                '/users/{userId}/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\PropertiesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\PropertiesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUserProperties
     *
     * Delete User Application Properties
     *
     * @param string $user_id User Id (required)
     * @param string $aid Application ID (optional)
     * @return \ArtikCloud\Model\PropertiesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function deleteUserProperties($user_id, $aid = null)
    {
        list($response) = $this->deleteUserPropertiesWithHttpInfo($user_id, $aid);
        return $response;
    }

    /**
     * Operation deleteUserPropertiesWithHttpInfo
     *
     * Delete User Application Properties
     *
     * @param string $user_id User Id (required)
     * @param string $aid Application ID (optional)
     * @return Array of \ArtikCloud\Model\PropertiesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function deleteUserPropertiesWithHttpInfo($user_id, $aid = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling deleteUserProperties');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($aid !== null) {
            $queryParams['aid'] = $this->apiClient->getSerializer()->toQueryValue($aid);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\PropertiesEnvelope',
                '/users/{userId}/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\PropertiesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\PropertiesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSelf
     *
     * Get Current User Profile
     *
     * @return \ArtikCloud\Model\UserEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getSelf()
    {
        list($response) = $this->getSelfWithHttpInfo();
        return $response;
    }

    /**
     * Operation getSelfWithHttpInfo
     *
     * Get Current User Profile
     *
     * @return Array of \ArtikCloud\Model\UserEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getSelfWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/users/self";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\UserEnvelope',
                '/users/self'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\UserEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\UserEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserDeviceTypes
     *
     * Get User Device Types
     *
     * @param string $user_id User ID. (required)
     * @param int $offset Offset for pagination. (optional)
     * @param int $count Desired count of items in the result set (optional)
     * @param bool $include_shared Optional. Boolean (true/false) - If false, only return the user&#39;s device types. If true, also return device types shared by other users. (optional)
     * @return \ArtikCloud\Model\DeviceTypesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getUserDeviceTypes($user_id, $offset = null, $count = null, $include_shared = null)
    {
        list($response) = $this->getUserDeviceTypesWithHttpInfo($user_id, $offset, $count, $include_shared);
        return $response;
    }

    /**
     * Operation getUserDeviceTypesWithHttpInfo
     *
     * Get User Device Types
     *
     * @param string $user_id User ID. (required)
     * @param int $offset Offset for pagination. (optional)
     * @param int $count Desired count of items in the result set (optional)
     * @param bool $include_shared Optional. Boolean (true/false) - If false, only return the user&#39;s device types. If true, also return device types shared by other users. (optional)
     * @return Array of \ArtikCloud\Model\DeviceTypesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getUserDeviceTypesWithHttpInfo($user_id, $offset = null, $count = null, $include_shared = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserDeviceTypes');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/devicetypes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($include_shared !== null) {
            $queryParams['includeShared'] = $this->apiClient->getSerializer()->toQueryValue($include_shared);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DeviceTypesEnvelope',
                '/users/{userId}/devicetypes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DeviceTypesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DeviceTypesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserDevices
     *
     * Get User Devices
     *
     * @param string $user_id User ID (required)
     * @param int $offset Offset for pagination. (optional)
     * @param int $count Desired count of items in the result set (optional)
     * @param bool $include_properties Optional. Boolean (true/false) - If false, only return the user&#39;s device types. If true, also return device types shared by other users. (optional)
     * @return \ArtikCloud\Model\DevicesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getUserDevices($user_id, $offset = null, $count = null, $include_properties = null)
    {
        list($response) = $this->getUserDevicesWithHttpInfo($user_id, $offset, $count, $include_properties);
        return $response;
    }

    /**
     * Operation getUserDevicesWithHttpInfo
     *
     * Get User Devices
     *
     * @param string $user_id User ID (required)
     * @param int $offset Offset for pagination. (optional)
     * @param int $count Desired count of items in the result set (optional)
     * @param bool $include_properties Optional. Boolean (true/false) - If false, only return the user&#39;s device types. If true, also return device types shared by other users. (optional)
     * @return Array of \ArtikCloud\Model\DevicesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getUserDevicesWithHttpInfo($user_id, $offset = null, $count = null, $include_properties = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserDevices');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/devices";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($include_properties !== null) {
            $queryParams['includeProperties'] = $this->apiClient->getSerializer()->toQueryValue($include_properties);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\DevicesEnvelope',
                '/users/{userId}/devices'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\DevicesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\DevicesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserProperties
     *
     * Get User application properties
     *
     * @param string $user_id User Id (required)
     * @param string $aid Application ID (optional)
     * @return \ArtikCloud\Model\PropertiesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getUserProperties($user_id, $aid = null)
    {
        list($response) = $this->getUserPropertiesWithHttpInfo($user_id, $aid);
        return $response;
    }

    /**
     * Operation getUserPropertiesWithHttpInfo
     *
     * Get User application properties
     *
     * @param string $user_id User Id (required)
     * @param string $aid Application ID (optional)
     * @return Array of \ArtikCloud\Model\PropertiesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getUserPropertiesWithHttpInfo($user_id, $aid = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserProperties');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($aid !== null) {
            $queryParams['aid'] = $this->apiClient->getSerializer()->toQueryValue($aid);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\PropertiesEnvelope',
                '/users/{userId}/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\PropertiesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\PropertiesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserRules
     *
     * Get User Rules
     *
     * @param string $user_id User ID. (required)
     * @param bool $exclude_disabled Exclude disabled rules in the result. (optional)
     * @param int $count Desired count of items in the result set. (optional)
     * @param int $offset Offset for pagination. (optional)
     * @return \ArtikCloud\Model\RulesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getUserRules($user_id, $exclude_disabled = null, $count = null, $offset = null)
    {
        list($response) = $this->getUserRulesWithHttpInfo($user_id, $exclude_disabled, $count, $offset);
        return $response;
    }

    /**
     * Operation getUserRulesWithHttpInfo
     *
     * Get User Rules
     *
     * @param string $user_id User ID. (required)
     * @param bool $exclude_disabled Exclude disabled rules in the result. (optional)
     * @param int $count Desired count of items in the result set. (optional)
     * @param int $offset Offset for pagination. (optional)
     * @return Array of \ArtikCloud\Model\RulesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function getUserRulesWithHttpInfo($user_id, $exclude_disabled = null, $count = null, $offset = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserRules');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/rules";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($exclude_disabled !== null) {
            $queryParams['excludeDisabled'] = $this->apiClient->getSerializer()->toQueryValue($exclude_disabled);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\RulesEnvelope',
                '/users/{userId}/rules'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\RulesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\RulesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateUserProperties
     *
     * Update User Application Properties
     *
     * @param string $user_id User Id (required)
     * @param \ArtikCloud\Model\AppProperties $properties Properties to be updated (required)
     * @param string $aid Application ID (optional)
     * @return \ArtikCloud\Model\PropertiesEnvelope
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateUserProperties($user_id, $properties, $aid = null)
    {
        list($response) = $this->updateUserPropertiesWithHttpInfo($user_id, $properties, $aid);
        return $response;
    }

    /**
     * Operation updateUserPropertiesWithHttpInfo
     *
     * Update User Application Properties
     *
     * @param string $user_id User Id (required)
     * @param \ArtikCloud\Model\AppProperties $properties Properties to be updated (required)
     * @param string $aid Application ID (optional)
     * @return Array of \ArtikCloud\Model\PropertiesEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function updateUserPropertiesWithHttpInfo($user_id, $properties, $aid = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling updateUserProperties');
        }
        // verify the required parameter 'properties' is set
        if ($properties === null) {
            throw new \InvalidArgumentException('Missing the required parameter $properties when calling updateUserProperties');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/properties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($aid !== null) {
            $queryParams['aid'] = $this->apiClient->getSerializer()->toQueryValue($aid);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($properties)) {
            $_tempBody = $properties;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\Model\PropertiesEnvelope',
                '/users/{userId}/properties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\Model\PropertiesEnvelope', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\Model\PropertiesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
