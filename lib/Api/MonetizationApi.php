<?php
/**
 * MonetizationApi
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\ArtikCloud\Api;

use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\Configuration;
use \ArtikCloud\ObjectSerializer;

/**
 * MonetizationApi Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MonetizationApi
{
    /**
     * API Client
     *
     * @var \ArtikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ArtikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ArtikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ArtikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ArtikCloud\ApiClient $apiClient set the API client
     *
     * @return MonetizationApi
     */
    public function setApiClient(\ArtikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPricingTiers
     *
     * Define devicetype's pricing tiers.
     *
     * @param string $dtid DeviceType ID (required)
     * @param \ArtikCloud\ArtikCloud\Model\DeviceTypePricingTier $pricing_tier_info Pricing tier info (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\DeviceTypePricingTier
     */
    public function createPricingTiers($dtid, $pricing_tier_info)
    {
        list($response) = $this->createPricingTiersWithHttpInfo($dtid, $pricing_tier_info);
        return $response;
    }

    /**
     * Operation createPricingTiersWithHttpInfo
     *
     * Define devicetype's pricing tiers.
     *
     * @param string $dtid DeviceType ID (required)
     * @param \ArtikCloud\ArtikCloud\Model\DeviceTypePricingTier $pricing_tier_info Pricing tier info (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\DeviceTypePricingTier, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPricingTiersWithHttpInfo($dtid, $pricing_tier_info)
    {
        // verify the required parameter 'dtid' is set
        if ($dtid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dtid when calling createPricingTiers');
        }
        // verify the required parameter 'pricing_tier_info' is set
        if ($pricing_tier_info === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pricing_tier_info when calling createPricingTiers');
        }
        // parse inputs
        $resourcePath = "/pricing/devicetypes/{dtid}/pricingtiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($dtid !== null) {
            $resourcePath = str_replace(
                "{" . "dtid" . "}",
                $this->apiClient->getSerializer()->toPathValue($dtid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pricing_tier_info)) {
            $_tempBody = $pricing_tier_info;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\DeviceTypePricingTier',
                '/pricing/devicetypes/{dtid}/pricingtiers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\DeviceTypePricingTier', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\DeviceTypePricingTier', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPricingTiers
     *
     * Get a device's pricing tiers
     *
     * @param string $did Device ID (required)
     * @param bool $active Filter by active (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\DevicePricingTiersEnvelope
     */
    public function getPricingTiers($did, $active = null)
    {
        list($response) = $this->getPricingTiersWithHttpInfo($did, $active);
        return $response;
    }

    /**
     * Operation getPricingTiersWithHttpInfo
     *
     * Get a device's pricing tiers
     *
     * @param string $did Device ID (required)
     * @param bool $active Filter by active (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\DevicePricingTiersEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPricingTiersWithHttpInfo($did, $active = null)
    {
        // verify the required parameter 'did' is set
        if ($did === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did when calling getPricingTiers');
        }
        // parse inputs
        $resourcePath = "/pricing/devices/{did}/pricingtiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($active !== null) {
            $queryParams['active'] = $this->apiClient->getSerializer()->toQueryValue($active);
        }
        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                "{" . "did" . "}",
                $this->apiClient->getSerializer()->toPathValue($did),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\DevicePricingTiersEnvelope',
                '/pricing/devices/{did}/pricingtiers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\DevicePricingTiersEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\DevicePricingTiersEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getThePricingTiers
     *
     * Get devicetype's pricing tiers.
     *
     * @param string $dtid DeviceType ID (required)
     * @param int $version Version (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\DeviceTypePricingTiersEnvelope
     */
    public function getThePricingTiers($dtid, $version)
    {
        list($response) = $this->getThePricingTiersWithHttpInfo($dtid, $version);
        return $response;
    }

    /**
     * Operation getThePricingTiersWithHttpInfo
     *
     * Get devicetype's pricing tiers.
     *
     * @param string $dtid DeviceType ID (required)
     * @param int $version Version (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\DeviceTypePricingTiersEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThePricingTiersWithHttpInfo($dtid, $version)
    {
        // verify the required parameter 'dtid' is set
        if ($dtid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dtid when calling getThePricingTiers');
        }
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling getThePricingTiers');
        }
        // parse inputs
        $resourcePath = "/pricing/devicetypes/{dtid}/pricingtiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($dtid !== null) {
            $resourcePath = str_replace(
                "{" . "dtid" . "}",
                $this->apiClient->getSerializer()->toPathValue($dtid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                $this->apiClient->getSerializer()->toPathValue($version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\DeviceTypePricingTiersEnvelope',
                '/pricing/devicetypes/{dtid}/pricingtiers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\DeviceTypePricingTiersEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\DeviceTypePricingTiersEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUpgradePath
     *
     * Get upgrade path
     *
     * @param string $did Device ID (required)
     * @param string $action Action to perform (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\UpgradePathEnvelope
     */
    public function getUpgradePath($did, $action)
    {
        list($response) = $this->getUpgradePathWithHttpInfo($did, $action);
        return $response;
    }

    /**
     * Operation getUpgradePathWithHttpInfo
     *
     * Get upgrade path
     *
     * @param string $did Device ID (required)
     * @param string $action Action to perform (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\UpgradePathEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUpgradePathWithHttpInfo($did, $action)
    {
        // verify the required parameter 'did' is set
        if ($did === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did when calling getUpgradePath');
        }
        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling getUpgradePath');
        }
        // parse inputs
        $resourcePath = "/pricing/devices/{did}/revenueshare/upgradepath";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                "{" . "did" . "}",
                $this->apiClient->getSerializer()->toPathValue($did),
                $resourcePath
            );
        }
        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\UpgradePathEnvelope',
                '/pricing/devices/{did}/revenueshare/upgradepath'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\UpgradePathEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\UpgradePathEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setPricingTier
     *
     * Set a device's pricing tier
     *
     * @param string $did Device ID (required)
     * @param \ArtikCloud\ArtikCloud\Model\DevicePricingTierRequest $pricing_tier Pricing tier (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\DevicePricingTierEnvelope
     */
    public function setPricingTier($did, $pricing_tier)
    {
        list($response) = $this->setPricingTierWithHttpInfo($did, $pricing_tier);
        return $response;
    }

    /**
     * Operation setPricingTierWithHttpInfo
     *
     * Set a device's pricing tier
     *
     * @param string $did Device ID (required)
     * @param \ArtikCloud\ArtikCloud\Model\DevicePricingTierRequest $pricing_tier Pricing tier (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\DevicePricingTierEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPricingTierWithHttpInfo($did, $pricing_tier)
    {
        // verify the required parameter 'did' is set
        if ($did === null) {
            throw new \InvalidArgumentException('Missing the required parameter $did when calling setPricingTier');
        }
        // verify the required parameter 'pricing_tier' is set
        if ($pricing_tier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pricing_tier when calling setPricingTier');
        }
        // parse inputs
        $resourcePath = "/pricing/devices/{did}/pricingtiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                "{" . "did" . "}",
                $this->apiClient->getSerializer()->toPathValue($did),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pricing_tier)) {
            $_tempBody = $pricing_tier;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\DevicePricingTierEnvelope',
                '/pricing/devices/{did}/pricingtiers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\DevicePricingTierEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\DevicePricingTierEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
