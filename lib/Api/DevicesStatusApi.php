<?php
/**
 * DevicesStatusApi
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\ArtikCloud\Api;

use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\Configuration;
use \ArtikCloud\ObjectSerializer;

/**
 * DevicesStatusApi Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DevicesStatusApi
{
    /**
     * API Client
     *
     * @var \ArtikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ArtikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ArtikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ArtikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ArtikCloud\ApiClient $apiClient set the API client
     *
     * @return DevicesStatusApi
     */
    public function setApiClient(\ArtikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getDeviceStatus
     *
     * Get Device Status
     *
     * @param string $device_id Device ID. (required)
     * @param bool $include_snapshot Include device snapshot into the response (optional)
     * @param bool $include_snapshot_timestamp Include device snapshot timestamp into the response (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\DeviceStatus
     */
    public function getDeviceStatus($device_id, $include_snapshot = null, $include_snapshot_timestamp = null)
    {
        list($response) = $this->getDeviceStatusWithHttpInfo($device_id, $include_snapshot, $include_snapshot_timestamp);
        return $response;
    }

    /**
     * Operation getDeviceStatusWithHttpInfo
     *
     * Get Device Status
     *
     * @param string $device_id Device ID. (required)
     * @param bool $include_snapshot Include device snapshot into the response (optional)
     * @param bool $include_snapshot_timestamp Include device snapshot timestamp into the response (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\DeviceStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceStatusWithHttpInfo($device_id, $include_snapshot = null, $include_snapshot_timestamp = null)
    {
        // verify the required parameter 'device_id' is set
        if ($device_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_id when calling getDeviceStatus');
        }
        // parse inputs
        $resourcePath = "/devices/{deviceId}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($include_snapshot !== null) {
            $queryParams['includeSnapshot'] = $this->apiClient->getSerializer()->toQueryValue($include_snapshot);
        }
        // query params
        if ($include_snapshot_timestamp !== null) {
            $queryParams['includeSnapshotTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($include_snapshot_timestamp);
        }
        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                "{" . "deviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($device_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\DeviceStatus',
                '/devices/{deviceId}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\DeviceStatus', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\DeviceStatus', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDevicesStatus
     *
     * Get Devices Status
     *
     * @param string $dids List of device ids (comma-separated) for which the statuses are requested. (required)
     * @param bool $include_snapshot Include device snapshot into the response (optional)
     * @param bool $include_snapshot_timestamp Include device snapshot timestamp into the response (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\DeviceStatusBatch
     */
    public function getDevicesStatus($dids, $include_snapshot = null, $include_snapshot_timestamp = null)
    {
        list($response) = $this->getDevicesStatusWithHttpInfo($dids, $include_snapshot, $include_snapshot_timestamp);
        return $response;
    }

    /**
     * Operation getDevicesStatusWithHttpInfo
     *
     * Get Devices Status
     *
     * @param string $dids List of device ids (comma-separated) for which the statuses are requested. (required)
     * @param bool $include_snapshot Include device snapshot into the response (optional)
     * @param bool $include_snapshot_timestamp Include device snapshot timestamp into the response (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\DeviceStatusBatch, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDevicesStatusWithHttpInfo($dids, $include_snapshot = null, $include_snapshot_timestamp = null)
    {
        // verify the required parameter 'dids' is set
        if ($dids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dids when calling getDevicesStatus');
        }
        // parse inputs
        $resourcePath = "/devices/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($dids !== null) {
            $queryParams['dids'] = $this->apiClient->getSerializer()->toQueryValue($dids);
        }
        // query params
        if ($include_snapshot !== null) {
            $queryParams['includeSnapshot'] = $this->apiClient->getSerializer()->toQueryValue($include_snapshot);
        }
        // query params
        if ($include_snapshot_timestamp !== null) {
            $queryParams['includeSnapshotTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($include_snapshot_timestamp);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\DeviceStatusBatch',
                '/devices/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\DeviceStatusBatch', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\DeviceStatusBatch', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putDeviceStatus
     *
     * Update Device Status
     *
     * @param string $device_id Device ID. (required)
     * @param \ArtikCloud\ArtikCloud\Model\DeviceStatusPut $body Body (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\DeviceStatus
     */
    public function putDeviceStatus($device_id, $body = null)
    {
        list($response) = $this->putDeviceStatusWithHttpInfo($device_id, $body);
        return $response;
    }

    /**
     * Operation putDeviceStatusWithHttpInfo
     *
     * Update Device Status
     *
     * @param string $device_id Device ID. (required)
     * @param \ArtikCloud\ArtikCloud\Model\DeviceStatusPut $body Body (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\DeviceStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function putDeviceStatusWithHttpInfo($device_id, $body = null)
    {
        // verify the required parameter 'device_id' is set
        if ($device_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $device_id when calling putDeviceStatus');
        }
        // parse inputs
        $resourcePath = "/devices/{deviceId}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                "{" . "deviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($device_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\DeviceStatus',
                '/devices/{deviceId}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\DeviceStatus', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\DeviceStatus', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
