<?php
/**
 * TokensApi
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace ArtikCloud\Api;

use \ArtikCloud\Configuration;
use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\ObjectSerializer;

/**
 * TokensApi Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokensApi
{

    /**
     * API Client
     * @var \ArtikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \ArtikCloud\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.artik.cloud/v1.1');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \ArtikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \ArtikCloud\ApiClient $apiClient set the API client
     * @return TokensApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * checkToken
     *
     * Check Token
     *
     * @param \ArtikCloud\Model\TokenRequest $token_info Token object to be checked (required)
     * @return \ArtikCloud\Model\CheckTokenResponse
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function checkToken($token_info)
    {
        list($response, $statusCode, $httpHeader) = $this->checkTokenWithHttpInfo ($token_info);
        return $response; 
    }


    /**
     * checkTokenWithHttpInfo
     *
     * Check Token
     *
     * @param \ArtikCloud\Model\TokenRequest $token_info Token object to be checked (required)
     * @return Array of \ArtikCloud\Model\CheckTokenResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function checkTokenWithHttpInfo($token_info)
    {
        
        // verify the required parameter 'token_info' is set
        if ($token_info === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token_info when calling checkToken');
        }
  
        // parse inputs
        $resourcePath = "/checkToken";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($token_info)) {
            $_tempBody = $token_info;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\ArtikCloud\Model\CheckTokenResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\ArtikCloud\ObjectSerializer::deserialize($response, '\ArtikCloud\Model\CheckTokenResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = \ArtikCloud\ObjectSerializer::deserialize($e->getResponseBody(), '\ArtikCloud\Model\CheckTokenResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * refreshToken
     *
     * Refresh Token
     *
     * @param string $grant_type Grant Type. (required)
     * @param string $refresh_token Refresh Token. (required)
     * @return \ArtikCloud\Model\RefreshTokenResponse
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function refreshToken($grant_type, $refresh_token)
    {
        list($response, $statusCode, $httpHeader) = $this->refreshTokenWithHttpInfo ($grant_type, $refresh_token);
        return $response; 
    }


    /**
     * refreshTokenWithHttpInfo
     *
     * Refresh Token
     *
     * @param string $grant_type Grant Type. (required)
     * @param string $refresh_token Refresh Token. (required)
     * @return Array of \ArtikCloud\Model\RefreshTokenResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \ArtikCloud\ApiException on non-2xx response
     */
    public function refreshTokenWithHttpInfo($grant_type, $refresh_token)
    {
        
        // verify the required parameter 'grant_type' is set
        if ($grant_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $grant_type when calling refreshToken');
        }
        // verify the required parameter 'refresh_token' is set
        if ($refresh_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $refresh_token when calling refreshToken');
        }
  
        // parse inputs
        $resourcePath = "/token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/x-www-form-urlencoded'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($grant_type !== null) {
            
            
            $formParams['grant_type'] = $this->apiClient->getSerializer()->toFormValue($grant_type);
            
        }// form params
        if ($refresh_token !== null) {
            
            
            $formParams['refresh_token'] = $this->apiClient->getSerializer()->toFormValue($refresh_token);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\ArtikCloud\Model\RefreshTokenResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\ArtikCloud\ObjectSerializer::deserialize($response, '\ArtikCloud\Model\RefreshTokenResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = \ArtikCloud\ObjectSerializer::deserialize($e->getResponseBody(), '\ArtikCloud\Model\RefreshTokenResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
