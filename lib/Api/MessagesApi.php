<?php
/**
 * MessagesApi
 * PHP version 5
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARTIK Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ArtikCloud\ArtikCloud\Api;

use \ArtikCloud\ApiClient;
use \ArtikCloud\ApiException;
use \ArtikCloud\Configuration;
use \ArtikCloud\ObjectSerializer;

/**
 * MessagesApi Class Doc Comment
 *
 * @category Class
 * @package  ArtikCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagesApi
{
    /**
     * API Client
     *
     * @var \ArtikCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ArtikCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ArtikCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ArtikCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ArtikCloud\ApiClient $apiClient set the API client
     *
     * @return MessagesApi
     */
    public function setApiClient(\ArtikCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAggregatesHistogram
     *
     * Get Normalized Message Histogram
     *
     * @param int $start_date Timestamp of earliest message (in milliseconds since epoch). (required)
     * @param int $end_date Timestamp of latest message (in milliseconds since epoch). (required)
     * @param string $sdid Source device ID of the messages being searched. (optional)
     * @param string $field Message field being queried for building histogram. (optional)
     * @param string $interval Interval of time for building histogram blocks. (Valid values: minute, hour, day, month, year) (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\AggregatesHistogramResponse
     */
    public function getAggregatesHistogram($start_date, $end_date, $sdid = null, $field = null, $interval = null)
    {
        list($response) = $this->getAggregatesHistogramWithHttpInfo($start_date, $end_date, $sdid, $field, $interval);
        return $response;
    }

    /**
     * Operation getAggregatesHistogramWithHttpInfo
     *
     * Get Normalized Message Histogram
     *
     * @param int $start_date Timestamp of earliest message (in milliseconds since epoch). (required)
     * @param int $end_date Timestamp of latest message (in milliseconds since epoch). (required)
     * @param string $sdid Source device ID of the messages being searched. (optional)
     * @param string $field Message field being queried for building histogram. (optional)
     * @param string $interval Interval of time for building histogram blocks. (Valid values: minute, hour, day, month, year) (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\AggregatesHistogramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregatesHistogramWithHttpInfo($start_date, $end_date, $sdid = null, $field = null, $interval = null)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getAggregatesHistogram');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getAggregatesHistogram');
        }
        // parse inputs
        $resourcePath = "/messages/analytics/histogram";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($sdid !== null) {
            $queryParams['sdid'] = $this->apiClient->getSerializer()->toQueryValue($sdid);
        }
        // query params
        if ($field !== null) {
            $queryParams['field'] = $this->apiClient->getSerializer()->toQueryValue($field);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = $this->apiClient->getSerializer()->toQueryValue($interval);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\AggregatesHistogramResponse',
                '/messages/analytics/histogram'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\AggregatesHistogramResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\AggregatesHistogramResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFieldPresence
     *
     * Get normalized message presence
     *
     * @param int $start_date startDate (required)
     * @param int $end_date endDate (required)
     * @param string $interval String representing grouping interval. One of: &#39;minute&#39; (1 hour limit), &#39;hour&#39; (1 day limit), &#39;day&#39; (31 days limit), &#39;month&#39; (1 year limit), or &#39;year&#39; (10 years limit). (required)
     * @param string $sdid Source device ID of the messages being searched. (optional)
     * @param string $field_presence String representing a field from the specified device ID. (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\FieldPresenceEnvelope
     */
    public function getFieldPresence($start_date, $end_date, $interval, $sdid = null, $field_presence = null)
    {
        list($response) = $this->getFieldPresenceWithHttpInfo($start_date, $end_date, $interval, $sdid, $field_presence);
        return $response;
    }

    /**
     * Operation getFieldPresenceWithHttpInfo
     *
     * Get normalized message presence
     *
     * @param int $start_date startDate (required)
     * @param int $end_date endDate (required)
     * @param string $interval String representing grouping interval. One of: &#39;minute&#39; (1 hour limit), &#39;hour&#39; (1 day limit), &#39;day&#39; (31 days limit), &#39;month&#39; (1 year limit), or &#39;year&#39; (10 years limit). (required)
     * @param string $sdid Source device ID of the messages being searched. (optional)
     * @param string $field_presence String representing a field from the specified device ID. (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\FieldPresenceEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFieldPresenceWithHttpInfo($start_date, $end_date, $interval, $sdid = null, $field_presence = null)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getFieldPresence');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getFieldPresence');
        }
        // verify the required parameter 'interval' is set
        if ($interval === null) {
            throw new \InvalidArgumentException('Missing the required parameter $interval when calling getFieldPresence');
        }
        // parse inputs
        $resourcePath = "/messages/presence";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sdid !== null) {
            $queryParams['sdid'] = $this->apiClient->getSerializer()->toQueryValue($sdid);
        }
        // query params
        if ($field_presence !== null) {
            $queryParams['fieldPresence'] = $this->apiClient->getSerializer()->toQueryValue($field_presence);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = $this->apiClient->getSerializer()->toQueryValue($interval);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\FieldPresenceEnvelope',
                '/messages/presence'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\FieldPresenceEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\FieldPresenceEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLastNormalizedMessages
     *
     * Get Last Normalized Message
     *
     * @param int $count Number of items to return per query. (optional)
     * @param string $sdids Comma separated list of source device IDs (minimum: 1). (optional)
     * @param string $field_presence String representing a field from the specified device ID. (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope
     */
    public function getLastNormalizedMessages($count = null, $sdids = null, $field_presence = null)
    {
        list($response) = $this->getLastNormalizedMessagesWithHttpInfo($count, $sdids, $field_presence);
        return $response;
    }

    /**
     * Operation getLastNormalizedMessagesWithHttpInfo
     *
     * Get Last Normalized Message
     *
     * @param int $count Number of items to return per query. (optional)
     * @param string $sdids Comma separated list of source device IDs (minimum: 1). (optional)
     * @param string $field_presence String representing a field from the specified device ID. (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLastNormalizedMessagesWithHttpInfo($count = null, $sdids = null, $field_presence = null)
    {
        // parse inputs
        $resourcePath = "/messages/last";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($sdids !== null) {
            $queryParams['sdids'] = $this->apiClient->getSerializer()->toQueryValue($sdids);
        }
        // query params
        if ($field_presence !== null) {
            $queryParams['fieldPresence'] = $this->apiClient->getSerializer()->toQueryValue($field_presence);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope',
                '/messages/last'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMessageAggregates
     *
     * Get Normalized Message Aggregates
     *
     * @param string $sdid Source device ID of the messages being searched. (required)
     * @param string $field Message field being queried for aggregates. (required)
     * @param int $start_date Timestamp of earliest message (in milliseconds since epoch). (required)
     * @param int $end_date Timestamp of latest message (in milliseconds since epoch). (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\AggregatesResponse
     */
    public function getMessageAggregates($sdid, $field, $start_date, $end_date)
    {
        list($response) = $this->getMessageAggregatesWithHttpInfo($sdid, $field, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation getMessageAggregatesWithHttpInfo
     *
     * Get Normalized Message Aggregates
     *
     * @param string $sdid Source device ID of the messages being searched. (required)
     * @param string $field Message field being queried for aggregates. (required)
     * @param int $start_date Timestamp of earliest message (in milliseconds since epoch). (required)
     * @param int $end_date Timestamp of latest message (in milliseconds since epoch). (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\AggregatesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageAggregatesWithHttpInfo($sdid, $field, $start_date, $end_date)
    {
        // verify the required parameter 'sdid' is set
        if ($sdid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sdid when calling getMessageAggregates');
        }
        // verify the required parameter 'field' is set
        if ($field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field when calling getMessageAggregates');
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling getMessageAggregates');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling getMessageAggregates');
        }
        // parse inputs
        $resourcePath = "/messages/analytics/aggregates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sdid !== null) {
            $queryParams['sdid'] = $this->apiClient->getSerializer()->toQueryValue($sdid);
        }
        // query params
        if ($field !== null) {
            $queryParams['field'] = $this->apiClient->getSerializer()->toQueryValue($field);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\AggregatesResponse',
                '/messages/analytics/aggregates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\AggregatesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\AggregatesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMessageSnapshots
     *
     * Get Message Snapshots
     *
     * @param string $sdids Device IDs for which the snapshots are requested. Max 100 device ids per call. (required)
     * @param bool $include_timestamp Indicates whether to return timestamps of the last update for each field. (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\SnapshotResponses
     */
    public function getMessageSnapshots($sdids, $include_timestamp = null)
    {
        list($response) = $this->getMessageSnapshotsWithHttpInfo($sdids, $include_timestamp);
        return $response;
    }

    /**
     * Operation getMessageSnapshotsWithHttpInfo
     *
     * Get Message Snapshots
     *
     * @param string $sdids Device IDs for which the snapshots are requested. Max 100 device ids per call. (required)
     * @param bool $include_timestamp Indicates whether to return timestamps of the last update for each field. (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\SnapshotResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageSnapshotsWithHttpInfo($sdids, $include_timestamp = null)
    {
        // verify the required parameter 'sdids' is set
        if ($sdids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sdids when calling getMessageSnapshots');
        }
        // parse inputs
        $resourcePath = "/messages/snapshots";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sdids !== null) {
            $queryParams['sdids'] = $this->apiClient->getSerializer()->toQueryValue($sdids);
        }
        // query params
        if ($include_timestamp !== null) {
            $queryParams['includeTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($include_timestamp);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\SnapshotResponses',
                '/messages/snapshots'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\SnapshotResponses', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\SnapshotResponses', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNormalizedActions
     *
     * Get Normalized Actions
     *
     * @param string $uid User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to. (optional)
     * @param string $ddid Destination device ID of the actions being searched. (optional)
     * @param string $mid The message ID being searched. (optional)
     * @param string $offset A string that represents the starting item, should be the value of &#39;next&#39; field received in the last response. (required for pagination) (optional)
     * @param int $count count (optional)
     * @param int $start_date startDate (optional)
     * @param int $end_date endDate (optional)
     * @param string $order Desired sort order: &#39;asc&#39; or &#39;desc&#39; (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\NormalizedActionsEnvelope
     */
    public function getNormalizedActions($uid = null, $ddid = null, $mid = null, $offset = null, $count = null, $start_date = null, $end_date = null, $order = null)
    {
        list($response) = $this->getNormalizedActionsWithHttpInfo($uid, $ddid, $mid, $offset, $count, $start_date, $end_date, $order);
        return $response;
    }

    /**
     * Operation getNormalizedActionsWithHttpInfo
     *
     * Get Normalized Actions
     *
     * @param string $uid User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to. (optional)
     * @param string $ddid Destination device ID of the actions being searched. (optional)
     * @param string $mid The message ID being searched. (optional)
     * @param string $offset A string that represents the starting item, should be the value of &#39;next&#39; field received in the last response. (required for pagination) (optional)
     * @param int $count count (optional)
     * @param int $start_date startDate (optional)
     * @param int $end_date endDate (optional)
     * @param string $order Desired sort order: &#39;asc&#39; or &#39;desc&#39; (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\NormalizedActionsEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNormalizedActionsWithHttpInfo($uid = null, $ddid = null, $mid = null, $offset = null, $count = null, $start_date = null, $end_date = null, $order = null)
    {
        // parse inputs
        $resourcePath = "/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($uid !== null) {
            $queryParams['uid'] = $this->apiClient->getSerializer()->toQueryValue($uid);
        }
        // query params
        if ($ddid !== null) {
            $queryParams['ddid'] = $this->apiClient->getSerializer()->toQueryValue($ddid);
        }
        // query params
        if ($mid !== null) {
            $queryParams['mid'] = $this->apiClient->getSerializer()->toQueryValue($mid);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\NormalizedActionsEnvelope',
                '/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\NormalizedActionsEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\NormalizedActionsEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNormalizedMessages
     *
     * Get Normalized Messages
     *
     * @param string $uid User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to. (optional)
     * @param string $sdid Source device ID of the messages being searched. (optional)
     * @param string $mid The message ID being searched. (optional)
     * @param string $field_presence String representing a field from the specified device ID. (optional)
     * @param string $filter Filter. (optional)
     * @param string $offset A string that represents the starting item, should be the value of &#39;next&#39; field received in the last response. (required for pagination) (optional)
     * @param int $count count (optional)
     * @param int $start_date startDate (optional)
     * @param int $end_date endDate (optional)
     * @param string $order Desired sort order: &#39;asc&#39; or &#39;desc&#39; (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope
     */
    public function getNormalizedMessages($uid = null, $sdid = null, $mid = null, $field_presence = null, $filter = null, $offset = null, $count = null, $start_date = null, $end_date = null, $order = null)
    {
        list($response) = $this->getNormalizedMessagesWithHttpInfo($uid, $sdid, $mid, $field_presence, $filter, $offset, $count, $start_date, $end_date, $order);
        return $response;
    }

    /**
     * Operation getNormalizedMessagesWithHttpInfo
     *
     * Get Normalized Messages
     *
     * @param string $uid User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to. (optional)
     * @param string $sdid Source device ID of the messages being searched. (optional)
     * @param string $mid The message ID being searched. (optional)
     * @param string $field_presence String representing a field from the specified device ID. (optional)
     * @param string $filter Filter. (optional)
     * @param string $offset A string that represents the starting item, should be the value of &#39;next&#39; field received in the last response. (required for pagination) (optional)
     * @param int $count count (optional)
     * @param int $start_date startDate (optional)
     * @param int $end_date endDate (optional)
     * @param string $order Desired sort order: &#39;asc&#39; or &#39;desc&#39; (optional)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNormalizedMessagesWithHttpInfo($uid = null, $sdid = null, $mid = null, $field_presence = null, $filter = null, $offset = null, $count = null, $start_date = null, $end_date = null, $order = null)
    {
        // parse inputs
        $resourcePath = "/messages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($uid !== null) {
            $queryParams['uid'] = $this->apiClient->getSerializer()->toQueryValue($uid);
        }
        // query params
        if ($sdid !== null) {
            $queryParams['sdid'] = $this->apiClient->getSerializer()->toQueryValue($sdid);
        }
        // query params
        if ($mid !== null) {
            $queryParams['mid'] = $this->apiClient->getSerializer()->toQueryValue($mid);
        }
        // query params
        if ($field_presence !== null) {
            $queryParams['fieldPresence'] = $this->apiClient->getSerializer()->toQueryValue($field_presence);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope',
                '/messages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\NormalizedMessagesEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendActions
     *
     * Send Actions
     *
     * @param \ArtikCloud\ArtikCloud\Model\Actions $data Actions that are passed in the body (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\MessageIDEnvelope
     */
    public function sendActions($data)
    {
        list($response) = $this->sendActionsWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation sendActionsWithHttpInfo
     *
     * Send Actions
     *
     * @param \ArtikCloud\ArtikCloud\Model\Actions $data Actions that are passed in the body (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\MessageIDEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendActionsWithHttpInfo($data)
    {
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling sendActions');
        }
        // parse inputs
        $resourcePath = "/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\MessageIDEnvelope',
                '/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\MessageIDEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\MessageIDEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendMessage
     *
     * Send Message
     *
     * @param \ArtikCloud\ArtikCloud\Model\Message $data Message object that is passed in the body (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return \ArtikCloud\ArtikCloud\Model\MessageIDEnvelope
     */
    public function sendMessage($data)
    {
        list($response) = $this->sendMessageWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation sendMessageWithHttpInfo
     *
     * Send Message
     *
     * @param \ArtikCloud\ArtikCloud\Model\Message $data Message object that is passed in the body (required)
     * @throws \ArtikCloud\ApiException on non-2xx response
     * @return array of \ArtikCloud\ArtikCloud\Model\MessageIDEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendMessageWithHttpInfo($data)
    {
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling sendMessage');
        }
        // parse inputs
        $resourcePath = "/messages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ArtikCloud\ArtikCloud\Model\MessageIDEnvelope',
                '/messages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ArtikCloud\ArtikCloud\Model\MessageIDEnvelope', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ArtikCloud\ArtikCloud\Model\MessageIDEnvelope', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
